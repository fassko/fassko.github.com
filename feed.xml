<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kristaps Grinbergs</title><description>Kristaps Grinbergs - iOS and Apple technology developer. Startup founder. Conference speaker.</description><link>https://kristaps.me</link><language>en</language><lastBuildDate>Mon, 12 Jul 2021 08:45:17 +0000</lastBuildDate><pubDate>Mon, 12 Jul 2021 08:45:17 +0000</pubDate><ttl>250</ttl><atom:link href="https://kristaps.me/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-localization</guid><title>How to translate SwiftUI applications</title><description>Localizing our applications is more critical than we think. We usually stick with English as the primary language. Only 4.9% of the world’s 7.8 billion inhabitants speak English. Most of the people aren’t native English speakers. In the grand scheme of things, only 360 million people speak English as their first language.</description><link>https://kristaps.me/blog/swiftui-localization</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Localizing our applications is more critical than we think. We usually stick with English as the primary language. Only 4.9% of the world’s 7.8 billion inhabitants speak English. Most of the people aren’t native English speakers. In the grand scheme of things, only 360 million people speak English as their first language.</p><p>SwiftUI gives us great and easy-to-use options to translate our applications into multiple languages. We might all be familiar with the <code>Localizable.strings</code> file where we put all the translations. I’m not going into how to create this for your projects.</p><p>In addition, Xcode has the option to change build settings and change the default language without changing the system language itself.</p><img src="https://kristaps.me/assets/swiftui-localization/xcode-build-settings.png" alt="Change language in Xcode build settings"/><p>In this article, we will discuss how to translate our SwiftUI apps by checking out built-in features. We will also see how to translate dynamically changing text.</p><h2>Text approach</h2><p>Almost all SwiftUI building blocks like <code>Text</code>, <code>Button</code>, <code>TextField</code>, and more come with initializers using localization behind the scenes.</p><p>For instance, let’s say we create a <code>Text</code> view with the title <code>Name</code>. We can add that to the <code>Localizable.strings</code> file and it would be translated without us doing anything. If the translation isn’t provided, it will fall back to the specified default title. We can say that SwiftUI takes care of translating our apps without us doing extra work.</p><p>Let’s dig in a bit deeper and check out the <code>Text</code> initializer.</p><pre><code><span class="keyword">init</span>(<span class="keyword">_</span> key: <span class="type">LocalizedStringKey</span>, tableName: <span class="type">String</span>? = <span class="keyword">nil</span>, bundle: <span class="type">Bundle</span>? = <span class="keyword">nil</span>, comment: <span class="type">StaticString</span>? = <span class="keyword">nil</span>)
</code></pre><p>We can see that the first parameter is <code>LocalizedStringKey</code>. Let’s explore it.</p><h2>What is LocalizedStringKey?</h2><p>The <code>LocalizedStringKey</code> is the magic that powers all the translations in our SwiftUI apps. What it does is looks up in the <code>Localizable.strings</code> file and checks if there is a translation with this key. It conforms to <code>ExpressibleByStringLiteral</code> and that’s why we can use it in our SwiftUI view initializers.</p><p>Another way of using <code>LocalizedStringKey</code> is when a translation is passed into the view. Let’s say we have a greetings view that takes in a greeting text as a parameter. In such a case, we need to create a parameter that has type <code>LocalizedStringKey</code>. When constructing this, we pass in not the <code>String</code> value but initialized <code>LocalizedStringKey</code> by using the <code>LocalizedStringKey(_ value: String)</code> initializer. In this case, it isn’t treated as just text, but a key from the translations strings file.</p><h2>String interpolation</h2><p>Now we know how static translations work, but how does it work with dynamically created texts? For instance, we have a text view that would show a greeting with a user-provided name. It would be <code>Hello, Mary!</code>, but <code>Mary</code> would be substituted with an entry from the text field. To translate this kind of text, we should use string interpolation.</p><p>In the example above, we should add in the <code>Localizable.strings</code> file entry <code>Hello, %@!</code> and the <code>%@</code> would be a <code>String</code> parameter we pass in when creating the <code>LocalizedStringKey</code> like this:</p><pre><code><span class="type">Text</span>(<span class="string">"Hello,</span> \(name)<span class="string">!"</span>)
</code></pre><p>Behind the scenes, it is using the String formatting that can format numbers, dates, currency, and more, taking into consideration your user’s locale. In this blog post, we are not going to dig deeper into that topic.</p><h2>TL;DR</h2><p>Only 4.9% of all people on the planet speak English as their first language. This means that we have to translate our apps to reach a wider audience and make them more accessible.</p><p>SwiftUI has a great set of built-in features to facilitate translations. Most of the view elements can be translated by adding translations to the <code>Localizable.strings</code> file.</p><p>With dynamic text, we should use the string interpolation and format it accordingly, either passed in the parameter is a text, number, or date. And SwiftUI will format that in the user's defined locale.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUILocalization">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/localization">Localization guide by Apple</a></li><li><a href="https://swiftwithmajid.com/2019/10/16/localization-in-swiftui/">Localization in SwiftUI</a></li><li><a href="https://developer.apple.com/forums/thread/650492">Localization in SwiftUI forum thread</a></li><li><a href="https://benoitpasquier.com/localization-swiftui-how-top-preview-localized-content/">Localization with SwiftUI, how to preview your localized content</a></li><li><a href="https://www.empowerapps.show/96">Localization with Zach Brass</a></li><li><a href="https://www.ibabbleon.com/swiftui_localization_tutorial.html">Introduction to SwiftUI Localization tutorial</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2021-10220">Localize your SwiftUI app WWDC talk</a></li><li><a href="https://developer.apple.com/documentation/swiftui/preparing-views-for-localization">Preparing Views for Localization</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-gridview</guid><title>How to master grid layout in iOS with SwiftUI</title><description>Grid layouts enable us to show views in a grid that expands either vertically or horizontally. We've all seen it, for instance, in the iOS Photos application. Those who have worked with UIKit might recognize it as [UICollectionView](https://developer.apple.com/documentation/uikit/uicollectionview).</description><link>https://kristaps.me/blog/swiftui-gridview</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Grid layouts enable us to show views in a grid that expands either vertically or horizontally. We've all seen it, for instance, in the iOS Photos application. Those who have worked with UIKit might recognize it as <a href="https://developer.apple.com/documentation/uikit/uicollectionview">UICollectionView</a>.</p><p>SwiftUI offers two excellent options - <code>LazyVGrid</code> and <code>LazyHGrid</code>. This time, we will dig deeper and understand how we can use these components. The great thing about these two components is their usage; views are loaded lazily, which means when those appear on the screen.</p><p>I want to point out that <code>HStack</code> and <code>VStack</code> are available from iOS 14 and upward. If you're going to use grid layout in iOS 13, you should look into <code>HStack</code> and <code>VStack</code>, but the drawback is that those don't support lazy loading.</p><h2>Creating a grid layout</h2><p>Three steps are involved in creating a grid layout - have data set to show, configure the grid system, and initialize the grid layout itself. We are going to look into the last two. How to provide the data is an extensive topic and out of the scope of this post.</p><p>The initialization of a <code>LazyVGrid</code> is done by providing the columns, alignment of the items, spacing between the items, pinned views to the footer or header, and the content itself.</p><pre><code><span class="keyword">var</span> columns = [
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>())
]

<span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">ScrollView</span> {
    <span class="type">LazyVGrid</span>(columns: columns, spacing: <span class="number">20</span>, pinnedViews: .<span class="dotAccess">sectionHeaders</span>) {
      <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"Smilies"</span>).<span class="call">font</span>(.<span class="dotAccess">title</span>),
              footer: <span class="type">Text</span>(<span class="string">"Emoji smilies"</span>).<span class="call">font</span>(.<span class="dotAccess">subheadline</span>)) {
        <span class="type">ForEach</span>(<span class="type">Emoji</span>.<span class="property">smilies</span>, id: \.<span class="keyword">self</span>) { emoji <span class="keyword">in</span>
          <span class="type">Text</span>(emoji)
            .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
        }
      }
      
      <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"Animals"</span>).<span class="call">font</span>(.<span class="dotAccess">title</span>),
              footer: <span class="type">Text</span>(<span class="string">"Emoji animals"</span>).<span class="call">font</span>(.<span class="dotAccess">subheadline</span>)) {
        <span class="type">ForEach</span>(<span class="type">Emoji</span>.<span class="property">animals</span>, id: \.<span class="keyword">self</span>) { emoji <span class="keyword">in</span>
          <span class="type">Text</span>(emoji)
            .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
        }
      }
      
      <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"Food"</span>).<span class="call">font</span>(.<span class="dotAccess">title</span>),
              footer: <span class="type">Text</span>(<span class="string">"Emoji food"</span>).<span class="call">font</span>(.<span class="dotAccess">subheadline</span>)) {
        <span class="type">ForEach</span>(<span class="type">Emoji</span>.<span class="property">food</span>, id: \.<span class="keyword">self</span>) { emoji <span class="keyword">in</span>
          <span class="type">Text</span>(emoji)
            .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
        }
      }
      
    }
    .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>)
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-grid-layout/lazyvgrid-pinnedviews.png" alt="LazyVGrid"/><p>With the <code>LazyHGrid</code>, it is pretty similar. We just need to exchange <code>columns</code> parameter to `rows.</p><h2>Configure the grid layout</h2><p>When initializing the grid layout, it is paramount to specify how it would look like - rows for vertical-style and horizontal-style grid layout.</p><p>SwiftUI has a component to describe a single grid item, <code>GridItem</code>. Grid item is either row or column.</p><p>When initializing the <code>GridItem,</code> these three parameters are vital:</p><ul><li><code>size</code> - size of the item;</li><li><code>spacing</code> - spacing between the items;</li><li><code>alignment</code> - alignment when placing each grid item.</li></ul><h3>Grid item size</h3><p>We have three options to specify the size of the grid item:</p><ul><li><code>flexible(minimum: CGFloat, maximum: CGFloat)</code> - single flexible item in available space with optional parameters for min and max size;</li><li><code>adaptive(minimum: CGFloat, maximum: CGFloat)</code> - multiple items in available space;</li><li><code>fixed(CGFloat)</code> - single item with a fixed size in available space.</li></ul><p>Let's see how each case works in practice with <code>LazyVGrid</code> and <code>LazyHGrid</code>.</p><h4>Flexible</h4><p>With the flexible grid item size, we can provide minimum and maximum, but it works great even without that. The item size is calculated by dividing available space by item count.</p><pre><code>[
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>()),
  <span class="type">GridItem</span>(.<span class="call">flexible</span>())
]
</code></pre><h5>Vertical</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/flexible-lazyvgrid.png" alt="Flexible LazyVGrid"/><h5>Horizontal</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/flexible-lazyhgrid.png" alt="Flexible LazyHGrid"/><h4>Adaptive</h4><p>Adaptive grid layout size is the most suitable and appropriate 'GridItem` size. We need to provide the minimum and optionally maximum size, and the SwiftUI layout guide will take all the heavy-duty work away from us.</p><pre><code>[
  <span class="type">GridItem</span>(.<span class="call">adaptive</span>(minimum: <span class="number">50</span>))
]
</code></pre><h5>Vertical</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/adaptive-lazyvgrid.png" alt="Adaptive LazyVGrid"/><h5>Horizontal</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/adaptive-lazyhgrid.png" alt="Adaptive LazyHGrid"/><h4>Fixed</h4><p>Fixed <code>GridItem</code> layout size is meant to use when we know the item size, and it is constant.</p><pre><code>[
  <span class="type">GridItem</span>(.<span class="call">fixed</span>(<span class="number">100</span>)),
  <span class="type">GridItem</span>(.<span class="call">fixed</span>(<span class="number">100</span>)),
  <span class="type">GridItem</span>(.<span class="call">fixed</span>(<span class="number">100</span>))
]
</code></pre><h5>Vertical</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/fixed-lazyvgrid.png" alt="Fixed LazyVGrid"/><h5>Horizontal</h5><img src="https://kristaps.me/assets/swiftui-grid-layout/fixed-lazyhgrid.png" alt="Fixed LazyHGrid"/><h2>TL;DR</h2><p>Grid layout or previously known UICollectionView from UIKit times is a prominent building block to present data in a grid system. SwiftUI affords us components to build a grid layout either vertically or horizontally in a lazy manner; it means that items are loaded only when needed. These two components are <code>LazyVGrid</code> and <code>LazyHGrid</code>.</p><p>To create a grid layout with SwiftUI, we need to provide a data set, columns or rows, spacing between the items, and optionally pinned views (header and footer).</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUIGridView">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/lazyvgrid">LazyVGrid Documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/lazyhgrid">LazyHGrid Documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/griditem">GridItem documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/section">Section documentation</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-position-views-in-a-grid-using-lazyvgrid-and-lazyhgrid">How to position views in a grid using LazyVGrid and LazyHGrid</a></li><li><a href="https://swiftwithmajid.com/2020/07/08/mastering-grids-in-swiftui/">Mastering grids in SwiftUI</a></li><li><a href="https://swiftui-lab.com/impossible-grids/">https://swiftui-lab.com/impossible-grids/</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-navigationview</guid><title>Cracking the Navigation Bar Secrets with SwiftUI</title><description>Navigating from one view to another, or simply showing a title and buttons, is one of the most crucial building blocks of modern iOS applications. Almost every app has this feature. SwiftUI brings some new approaches for how to show the Navigation Bar, set the title, and add buttons. So let's check it out.</description><link>https://kristaps.me/blog/swiftui-navigationview</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Navigating from one view to another, or simply showing a title and buttons, is one of the most crucial building blocks of modern iOS applications. Almost every app has this feature. SwiftUI brings some new approaches for how to show the Navigation Bar, set the title, and add buttons. So let's check it out.</p><h2>Showing Navigation View</h2><p>To show a Navigation Bar using SwiftUI, we should use the <code>NavigationView</code> component that is responsible for this purpose. It requires that we provide the <code>Content</code> that is a <code>View</code> type. The <code>Content</code> can be anything from a text field to scrollable content. In short, it can be any SwiftUI view.</p><p>To show a title for the navigation, SwiftUI has a completely different approach than we are used to with UIKit. We should set it as a view modifier, not for the <code>NavigationView</code>, but the <code>Content</code>.</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">NavigationView</span> {
    <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
      .<span class="call">navigationTitle</span>(<span class="string">"Test"</span>)
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-navigationview/navigation-title.png" alt="Navigation View with a Title"/><p>SwiftUI framework provides a means to specify the size of the <code>NavigationView</code>. We want to use the <code>.navigationBarTitleDisplayMode</code> modifier for the <code>Content</code> and provide a display mode. <code>DisplayMode</code> type is an enum that has three cases:</p><ul><li><code>automatic</code> - inherits from the previous navigation item;</li><li><code>inline</code> - small navigation size;</li><li><code>large</code> - large navigation size.</li></ul><p>Let's see how to use it in the code.</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
    .<span class="call">navigationTitle</span>(<span class="string">"Title"</span>)
    .<span class="call">navigationBarTitleDisplayMode</span>(.<span class="dotAccess">inline</span>)     
}
</code></pre><img src="https://kristaps.me/assets/swiftui-navigationview/navigationview-small.png" alt="Small NavigationView"/><p>When we want to change the <code>NavigationView</code> to a larger size, we simply change the <code>.inline</code> to <code>.large</code>.</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
    .<span class="call">navigationTitle</span>(<span class="string">"Title"</span>)
    .<span class="call">navigationBarTitleDisplayMode</span>(.<span class="dotAccess">large</span>)
}
</code></pre><h2>Add Navigation View Buttons</h2><p>Now that we know how to show the <code>NavigationView</code>, let's explore how to add buttons. I want to point out that previously with SwiftUI, we used the <code>.navigationBarItems</code> view modifier, but this is now deprecated. With the latest SwiftUI version, we should call the <code>.toolbar</code> modifier. Let's dig deeper into how to use it in various scenarios.</p><h3>Add a Single Button</h3><p>Let's add a <code>Button</code> to the leading and trailing side of the <code>NavigationView</code>. To achieve this, we need to use the <code>.toolbar</code> view modifier and pass the <code>.ToolbarItem</code> view. To initialize the <code>.ToolbarItem</code>, we should provide the placement and content. The placement parameter is a type <code>ToolbarItemPlacement</code>, which is a struct. There are a couple ways to manage the placement, but for now we will look into two of them:</p><ul><li><code>navigationBarLeading</code> - shows the button on the leading side of the navigation bar;</li><li><code>navigationBarTrailing</code> - shows the button on the trailing side of the navigation bar.</li></ul><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">NavigationView</span> {
    <span class="type">Text</span>(<span class="string">"Buttons Example"</span>)
      .<span class="call">navigationTitle</span>(<span class="string">"Buttons"</span>)
      .<span class="call">toolbar</span> {
        <span class="type">ToolbarItem</span>(placement: .<span class="dotAccess">navigationBarLeading</span>) {
          <span class="type">Button</span>(action: {
            <span class="call">print</span>(<span class="string">"Refresh"</span>)
          }) {
            <span class="type">Label</span>(<span class="string">"Send"</span>, systemImage: <span class="string">"paperplane.fill"</span>)
          }
        }
        <span class="type">ToolbarItem</span>(placement: .<span class="dotAccess">navigationBarTrailing</span>) {
          <span class="type">Button</span>(action: {
            <span class="call">print</span>(<span class="string">"Refresh"</span>)
          }) {
            <span class="type">Label</span>(<span class="string">"Refresh"</span>, systemImage: <span class="string">"arrow.clockwise"</span>)
          }
        }
      }
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-navigationview/navigationview-single-button.png" alt="Single Button NavigationView"/><h3>Add multiple buttons</h3><p>Now that we know how to add a single button, let's learn how to add multiple buttons. This time we need to use the <code>ToolbarItemGroup</code> that represents a group of toolbar items.</p><pre><code>.<span class="call">toolbar</span> {
  <span class="type">ToolbarItemGroup</span>(placement: .<span class="dotAccess">navigationBarLeading</span>) {
    <span class="type">Button</span>(action: {
      <span class="call">print</span>(<span class="string">"Send"</span>)
    }) {
      <span class="type">Label</span>(<span class="string">"Send"</span>, systemImage: <span class="string">"paperplane.fill"</span>)
    }
  }

  <span class="type">ToolbarItemGroup</span>(placement: .<span class="dotAccess">navigationBarTrailing</span>) {
    <span class="type">Button</span>(action: {
      <span class="call">print</span>(<span class="string">"Refresh"</span>)
    }) {
      <span class="type">Label</span>(<span class="string">"Refresh"</span>, systemImage: <span class="string">"arrow.clockwise"</span>)
    }

    <span class="type">Button</span>(action: {
      <span class="call">print</span>(<span class="string">"Edit"</span>)
    }) {
      <span class="type">Label</span>(<span class="string">"Edit"</span>, systemImage: <span class="string">"slider.horizontal.3"</span>)
    }
  }
}
</code></pre><img src="https://kristaps.me/assets/swiftui-navigationview/navigationview-multiple-buttons.png" alt="Multiple Buttons NavigationView"/><p>When adding multiple buttons, we shouldn't go too crazy. Eventually it may become difficult to use the app because the buttons could cover up the the navigation bar title.</p><h2>Change Navigation View Color</h2><p>Right now, SwiftUI doesn’t have the option to change the color of the <code>NavigationView</code>. For that we need to turn back to UIKit and use the <code>UINavigationBarAppearance</code> object to customize the navigation bar.</p><p>To change the color of the SwiftUI navigation bar, we can add the <code>init</code> method to the SwiftUI view and change the navigation bar appearance inside there, like this:</p><pre><code><span class="keyword">init</span>() {
  <span class="keyword">let</span> coloredAppearance = <span class="type">UINavigationBarAppearance</span>()
  coloredAppearance.<span class="call">configureWithOpaqueBackground</span>()
  coloredAppearance.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemRed</span>
  coloredAppearance.<span class="property">titleTextAttributes</span> = [.<span class="dotAccess">foregroundColor</span>: <span class="type">UIColor</span>.<span class="property">white</span>]
  coloredAppearance.<span class="property">largeTitleTextAttributes</span> = [.<span class="dotAccess">foregroundColor</span>: <span class="type">UIColor</span>.<span class="property">white</span>]
  
  <span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">standardAppearance</span> = coloredAppearance
  <span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">compactAppearance</span> = coloredAppearance
  <span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">scrollEdgeAppearance</span> = coloredAppearance
  
  <span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">tintColor</span> = .<span class="dotAccess">white</span>
}

<span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">NavigationView</span> {
    <span class="type">Text</span>(<span class="string">"Navigtion Bar with different color"</span>)
      .<span class="call">navigationTitle</span>(<span class="string">"Title"</span>)
  }
}
</code></pre><p>We can see from the code that we are doing multiple things, like changing the background color and title text color. We can use either system colors or bring in colors from the iOS app assets catalog.</p><img src="https://kristaps.me/assets/swiftui-navigationview/navigationview-custom-color.png" alt="Navigation Bar with custom color"/><h2>TL;DR</h2><p>The Navigation Bar is a vital element of modern iOS and iPadOS applications. A majority of apps have more than one screen and our users have to navigate back and forth inside our apps.</p><p>SwiftUI comes with a new view, <code>NavigationView</code>, and we are required to completely shift our thinking about the navigation and how to use it compared with the UIKit.</p><p>With SwiftUI, it is very straightforward to add navigation on the screen, change the title, and add buttons to the Navigation Bar. But if we want to change the color, we should go back to the UIKit. I believe this will change quite soon.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUINavigationView">Sample code</a></li></ul><ul><li><a href="https://www.hackingwithswift.com/articles/216/complete-guide-to-navigationview-in-swiftui">The Complete Guide to NavigationView in SwiftUI</a></li><li><a href="https://www.simpleswiftguide.com/swiftui-navigationview-tutorial-with-examples/">SwiftUI NavigationView tutorial with examples</a></li><li><a href="https://youtu.be/kCJyhG8zjvY">Navigation Bar Styling in SwiftUI</a></li><li><a href="https://swiftuirecipes.com/blog/navigation-bar-styling-in-swiftui">Navigation bar styling in SwiftUI</a></li><li><a href="https://medium.com/@francisco.gindre/customizing-swiftui-navigation-bar-8369d42b8805">Customizing SwiftUI Navigation Bar</a></li><li><a href="https://medium.com/swlh/custom-navigationview-bar-in-swiftui-4b782eb68e94">Custom NavigationView Bar in SwiftUI</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-bar-items-to-a-navigation-view">https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-bar-items-to-a-navigation-view</a></li><li><a href="https://medium.com/@francisco.gindre/customizing-swiftui-navigation-bar-8369d42b8805">Customizing SwiftUI Navigation Bar</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-tabview</guid><title>The hidden secrets of TabView in iOS with SwiftUI</title><description>TabBar is a vital component of iOS and has been from iOS 2.0. This element appears at the bottom of the iOS and iPadOS devices and allows our app users to switch between different views or functions quickly. It is a major element of Apple's apps like Music, Podcasts, and App Store.</description><link>https://kristaps.me/blog/swiftui-tabview</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>TabBar is a vital component of iOS and has been from iOS 2.0. This element appears at the bottom of the iOS and iPadOS devices and allows our app users to switch between different views or functions quickly.</p><p>It is a major element of Apple's apps like Music, Podcasts, and App Store.</p><img src="https://kristaps.me/assets/swiftui-tabview/appstore-tabview.png" alt="SwiftUI DisclosureGroup"/><p>In SwiftUI, we have a new element name <code>TabView</code> instead of <code>UITabBar</code> in UIKit. In this post, we will look into how to use it, especially how the <code>TabView</code> can be used to show page indicators.</p><h2>Ways to initialize TabView in SwiftUI</h2><p>Right now we have two options to create a tab view with SwiftUI. We can either take control of the selected tab or avoid it whatsoever. Let's look into both of these approaches.</p><h3>Create the TabView with SwiftUI</h3><p>To create a <code>TabView</code> element, we need to pass the <code>Content</code> that is a list of SwiftUI views. To mark this view as a tab bar item, we need to use the <code>tabItem</code> view modifier passing inside a <code>Label</code> that describes a title and image.</p><p>Let's now put all this together in the code.</p><pre><code><span class="type">TabView</span> {
  <span class="type">Text</span>(<span class="string">"The First Tab"</span>)
    .<span class="call">tabItem</span> {
      <span class="type">Label</span>(<span class="string">"First"</span>, systemImage: <span class="string">"1.square.fill"</span>)
    }
  
  <span class="type">Text</span>(<span class="string">"The Second Tab"</span>)
    .<span class="call">tabItem</span> {
      <span class="type">Label</span>(<span class="string">"Second"</span>, systemImage: <span class="string">"2.square.fill"</span>)
    }
  
  <span class="type">Text</span>(<span class="string">"The Third Tab"</span>)
    .<span class="call">tabItem</span> {
      <span class="type">Label</span>(<span class="string">"Third"</span>, systemImage: <span class="string">"3.square.fill"</span>)
    }
}
</code></pre><p>Now we can unpack the code above. Each tab is just a <code>Text</code> view, and the tab item is a <code>Label</code> with a title and system image that is an SF Symbol.</p><img src="https://kristaps.me/assets/swiftui-tabview/swiftui-tabview.gif" alt="SwiftUI DisclosureGroup"/><h3>Control the selected tab programmatically</h3><p>Suppose we want to control the selected tab programmatically. In that case, we need to use the second approach to initialize the method where besides the content, we need to pass a state variable that keeps the currently selected tab. Another critical step is to mark each tab with a <code>tag</code> modifier with a value that conforms to the <code>Hashable</code> protocol. This is how the SwiftUI layout engine differs between the tabs and can understand the uniqueness.</p><pre><code><span class="type">TabView</span>(selection: $selectedTab) {
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Move to Second Tab"</span>) {
      selectedTab = <span class="number">2</span>
    }
  }
  .<span class="call">tabItem</span> {
    <span class="type">Label</span>(<span class="string">"First"</span>, systemImage: <span class="string">"1.square.fill"</span>)
  }
  .<span class="call">tag</span>(<span class="number">1</span>)
  
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Move to Third Tab"</span>) {
      selectedTab = <span class="number">3</span>
    }
  }
  .<span class="call">tabItem</span> {
    <span class="type">Label</span>(<span class="string">"Second"</span>, systemImage: <span class="string">"2.square.fill"</span>)
  }
  .<span class="call">tag</span>(<span class="number">2</span>)
  
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Move to First Tab"</span>) {
      selectedTab = <span class="number">1</span>
    }
  }
  .<span class="call">tabItem</span> {
    <span class="type">Label</span>(<span class="string">"Third"</span>, systemImage: <span class="string">"3.square.fill"</span>)
  }
  .<span class="call">tag</span>(<span class="number">3</span>)
}
</code></pre><p>Let's go over the code above step by step.</p><p>Firstly we are using the <code>VStack</code> views with a <code>Button</code> inside to select the next tab or the last the first accordingly.</p><p>Then we are using the <code>tag</code> modifier for each of the tab items. We are using the <code>Int</code> value type to keep track of the currently selected tab. We are not limited to the <code>Int</code> value type, which conforms to the <code>Hashable</code> protocol, but we can use our type if we want to. For the sake of simplicity, we are using the <code>Int</code> this time.</p><img src="https://kristaps.me/assets/swiftui-tabview/swiftui-tabview-selected-programmatically.gif" alt="Select current tab programmatically"/><h2>Customize TabView</h2><p>Sadly there aren't many options for customizing the <code>TabView</code> in SwiftUI. We can change the image and title for the tabs, but that is quite understandable.</p><p>We can change the default accent color. Let's change it to purple.</p><pre><code><span class="type">TabView</span> {
 <span class="comment">// ...</span>
}
.<span class="call">accentColor</span>(.<span class="dotAccess">purple</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-tabview/swiftui-tabview-accentcolor.png" alt="SwiftUI TabView with accentColor"/><h2>TabView styles in SwiftUI</h2><p>In SwiftUI, we are not limited to the regular tab bar style. Right now, we have three ways how to change the <code>TabView</code> styles:</p><ul><li><code>DefaultTabViewStyle	</code> - regular style that we all know;</li><li><code>PageTabViewStyle</code> - scrolling pages with the page indicator;</li><li><code>CarouselTabViewStyle</code> - specific style for watchOS that we're not going to look into in this post.</li></ul><h3>Create scrolling pages</h3><p>To create scrolling pages with the <code>TabView</code> in SwiftUI, we need to call the view modifier <code>tabViewStyle	</code> and pass an instance of <code>	PageTabViewStyle</code> style.</p><pre><code><span class="type">TabView</span> {
  <span class="type">Color</span>.<span class="property">gray</span>
  <span class="type">Color</span>.<span class="property">green</span>
  <span class="type">Color</span>.<span class="property">blue</span>
}
.<span class="call">tabViewStyle</span>(<span class="type">PageTabViewStyle</span>())
</code></pre><p>If we want to hide the page indicator, we specify the <code>indexDisplayMode</code> parameter for the <code>PageTabViewStyle</code> instance and set it to <code>.never</code>.</p><pre><code><span class="type">TabView</span> {
  <span class="comment">// ...</span>
}
.<span class="call">tabViewStyle</span>(<span class="type">PageTabViewStyle</span>(indexDisplayMode: .<span class="dotAccess">never</span>))
</code></pre><img src="https://kristaps.me/assets/swiftui-tabview/swiftui-tabview-scrolling-pages.gif" alt="SwiftUI TabView with scrolling pages"/><h2>TL;DR</h2><p>TabBar on the bottom of the screen is one of the most important building blocks for modern iOS applications. Apple themselves is using it frequently in their apps.</p><p>With SwiftUI, this element now has the new name <code>TabView</code>. It allows us to add the tab view and control the currently selected tab programmatically.</p><p>The hidden feature of the <code>TabView</code> is that we can use it to show the multiple tabs with page indicators, and those can be controlled by scrolling between them. In UIKit, it was <code>UIPageViewController</code>.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/SwiftUITabView">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/bars/tab-bars/">Human Interface Guidelines - Tab Bars</a></li><li><a href="https://developer.apple.com/documentation/swiftui/tabview">SwiftUI documentation - TabView</a></li><li><a href="https://www.iosapptemplates.com/blog/swiftui/tabview-swiftui">How to Create a Tab Bar in SwiftUI with TabView</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/adding-tabview-and-tabitem">Adding TabView and tabItem()</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-embed-views-in-a-tab-bar-using-tabview">How to embed views in a tab bar using TabView</a></li><li><a href="https://www.appcoda.com/swiftui-tabview/">Introducing SwiftUI TabView and Working with Tab Bar Customization</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-disclosure-group</guid><title>How to show and hide content with DisclosureGroup using SwiftUI</title><description>Showing and hiding some parts of information is a vital feature in mobile apps, especially considering that phone screens are much smaller than those on laptops or desktop computers. Now with the new SwiftUI capabilities, we can collapse content with `DisclosureGroup`. Let's see how we could use it in various ways.</description><link>https://kristaps.me/blog/swiftui-disclosure-group</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Showing and hiding some parts of information is a vital feature in mobile apps, especially considering that phone screens are much smaller than those on laptops or desktop computers.</p><p>Now with the new SwiftUI capabilities, we can collapse content with <code>DisclosureGroup</code>. Let's see how we could use it in various ways.</p><h2>Display a collapsable content</h2><p>Let's start with the most straightforward way to set up a collapsable view that we could show or hide. It comes with a disclosure arrow indicator and nice animation.</p><p>In this blog post, let's use an example showing weather conditions that would be a SwiftUI view <code>WeatherDetailsView</code> and show temperature and wind information.</p><p>If we would like to show or hide that information, we can use the <code>DisclosureGroup</code> initializer by just passing a string value and content out the <code>WeatherDetailsView</code> view.</p><pre><code><span class="type">DisclosureGroup</span>(<span class="string">"Current Weather Details"</span>) {
  <span class="type">WeatherDetailsView</span>()
}
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-string-init.gif" alt="SwiftUI DisclosureGroup"/><h2>Modify <code>DisclosureGroup</code></h2><p>Now let's check out how we can modify the <code>DisclosureGroup</code>. Currently, we can't do much, and it is pretty limited, but we can change the accent color and disable it.</p><p>Let's start with disabling the option to show and hide the weather information. We could do this by using the <code>disabled</code> modifier.</p><pre><code><span class="type">DisclosureGroup</span>(<span class="string">"Current Weather Details"</span>) {
  <span class="type">WeatherDetailsView</span>()
}
.<span class="call">disabled</span>(<span class="keyword">true</span>)
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-disabled.png" alt="SwiftUI DisclosureGroup"/><p>By default, the disclosure arrow comes in blue color. By using the <code>accentColor</code> modifier, we could switch to our desired color. We could use a system color or a defined color in the Assets catalog.</p><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-accent-color.png" alt="SwiftUI DisclosureGroup"/><h2>Configure <code>DisclosureGroup</code> title</h2><p>So far, we have only changed the inner content of the disclosure group view. How about if you would like to change the title to a label view? The new <a href="https://developer.apple.com/documentation/swiftui/label">Label</a> comes with an initializer to pass the textual title and a system image's use that. For that, we can use a special <code>DisclosureGroup</code> initializer providing a custom label.</p><pre><code><span class="type">DisclosureGroup</span>(
  content: {
    <span class="type">WeatherDetailsView</span>()
  },
  label: {
    <span class="type">Label</span>(<span class="string">"Current Weather Details"</span>, systemImage: <span class="string">"thermometer"</span>)
      .<span class="call">font</span>(.<span class="dotAccess">headline</span>)
  }
)
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-custom-label.png" alt="SwiftUI DisclosureGroup"/><h2>Manually control show/hide state</h2><p>To either show or hide the disclosure group's content, we relied on the user to click on the arrow. There can be cases where we would like to change this behavior using a toggle button. To do this, we could use a state boolean variable that indicates either the disclosure group is expanded or not.</p><pre><code><span class="keyword">@State private var</span> isExpanded = <span class="keyword">false</span>

<span class="comment">/// ...</span>

<span class="type">Toggle</span>(<span class="string">"Show Current Weather Details"</span>, isOn: $isExpanded)

<span class="type">DisclosureGroup</span>(<span class="string">"Current Weather Details"</span>, isExpanded: $isExpanded) {
  <span class="type">WeatherDetailsView</span>()
}
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-isExpanded-toggle.gif" alt="SwiftUI DisclosureGroup"/><p>It is odd that once you press on the title, it does not expand; instead, we need to point our finger and press on the disclosure arrow button. We could fix it by implementing the title as a button and control the <code>isExpanded</code> property.</p><pre><code><span class="type">DisclosureGroup</span>(
  isExpanded: $isExpanded,
  content: { <span class="type">WeatherDetailsView</span>() },
  label: {
    <span class="type">Button</span>(<span class="string">"Current Weather Details"</span>) {
      <span class="call">withAnimation</span> {
        isExpanded.<span class="call">toggle</span>()
      }
    }
  }
)
</code></pre><img src="https://kristaps.me/assets/disclosuregroup-swiftui/disclosuregroup-isExpanded-label-button.gif" alt="SwiftUI DisclosureGroup"/><h2>TL;DR</h2><p>Showing and hiding some information is a nice touch for mobile applications because of the limiting screen size.</p><p>The New SwiftUI version gives us a component out of the box specifically for <code>DisclosureGroup</code>.</p><p>Currently, it is pretty limited but offers some possibilities to customize it if we need to.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/swiftui-DisclosureGroup">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/disclosuregroup">Official documentation</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-hide-and-reveal-content-using-disclosuregroup">How to hide and reveal content using DisclosureGroup</a></li><li><a href="https://www.ioscreator.com/tutorials/swiftui-disclosure-group-tutorial">SwiftUI DisclosureGroup Tutorial</a></li><li><a href="https://betterprogramming.pub/swiftuis-groupbox-outlinegroup-and-disclosuregroup-in-ios-14-cf9fb127cdc0">SwiftUI’s GroupBox, OutlineGroup, and DisclosureGroup in iOS 14</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-alert</guid><title>How to use Alert with SwiftUI</title><description>Alerts are one of the most crucial building blocks of iOS applications. We can use them to inform users about an error if something takes more time, like downloading a file or ensuring that everything is OK. Another use case with alerts is asking confirmation if our app users want to delete something or make a wire transfer.</description><link>https://kristaps.me/blog/swiftui-alert</link><pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Alerts are one of the most crucial building blocks of iOS applications. We can use them to inform users about an error if something takes more time, like downloading a file or ensuring that everything is OK. Another use case with alerts is asking confirmation if our app users want to delete something or make a wire transfer.</p><p>SwiftUI has the <code>Alert</code> component, and there are a couple of ways how to use it. Let's check it out.</p><h2>Alert</h2><p>One of the easiest ways how to show the alert with SwiftUI is to have a local state variable to indicate if the alert should be visible or not. After that, we need to add a view modifier <code>.alert</code> that requires returning the <code>Alert</code> view.</p><pre><code><span class="keyword">@State private var</span> showAlert = <span class="keyword">false

var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Show alert"</span>) {
      showAlert = <span class="keyword">true</span>
    }
    .<span class="call">alert</span>(isPresented: $showAlert) {
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Title"</span>))
    }
  }
}
</code></pre><p>In the previous example, we saw that the <code>showAlert</code> state variable keeps a <code>bool</code> value. At first, the alert isn't visible, and it is <code>false</code>. When we press the button, we need to change the state variable to <code>true</code> which triggers the alert to be visible on the screen.</p><img src="https://kristaps.me/assets/swiftui-alert/alert.png" alt="Alert with SwiftUI"/><p>We can see that by default, the alert has an OK button to dismiss it. We will try to add more buttons later in this post.</p><p>For the <code>Alert</code> view, we can provide not only <code>title</code> but also a <code>message</code> field that is one under another.</p><pre><code><span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Title"</span>),
      message: <span class="type">Text</span>(<span class="string">"Message"</span>))
</code></pre><img src="https://kristaps.me/assets/swiftui-alert/alert-with-message.png" alt="Alert with message"/><h2>Alert with identifiable item</h2><p>Another way to present an alert in the SwiftUI is by using an identifiable view state variable. Using this approach SwiftUI layout system passes the value of this state variable, and we can populate the alert title, message, or event buttons using its contents. The bonus is that once this item changes, the SwiftUI layout system would update the alert with the new value, which is a pretty neat feature that we get for free.</p><p>Let's see how to do it in the code. At first, we need to set up an object that implements the <code>Identifiable</code> protocol. Let's create a user structure. We need to create an <code>id</code> constant, and we could use the <code>UUID</code> structure that represents a globally unique value that can identify values between them.</p><pre><code><span class="keyword">struct</span> User: <span class="type">Identifiable</span> {
  <span class="keyword">let</span> id: <span class="type">UUID</span>
  <span class="keyword">let</span> name: <span class="type">String</span>
}
</code></pre><p>Next, let's move to the SwiftUI part and create our view.</p><pre><code><span class="keyword">@State private var</span> user: <span class="type">User</span>?

<span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Show alert"</span>) {
      user = <span class="type">User</span>(id: <span class="type">UUID</span>(), name: <span class="string">"Kristaps"</span>)
    }
    .<span class="call">alert</span>(item: $user) { user <span class="keyword">in</span>
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Hello,</span> \(user.<span class="property">name</span>)<span class="string">!"</span>))
    }
  }
}
</code></pre><p>It is important to note that the view state variable is optional because SwiftUI determines if the alert should be visible on the screen.</p><p>When using the <code>.alert</code> view modifier, we have the closure with an input variable which is the current value of the state variable. This way, we could populate, for instance, the alert title.</p><img src="https://kristaps.me/assets/swiftui-alert/alert-identifiable-item.png" alt="Alert with identifiable item"/><h2>Alert Buttons</h2><p>Now we know how to show an alert on the screen using SwiftUI with two different approaches. But how to show more than one button and customize them?</p><p>To add buttons for the alert, we could use either the <code>Alert</code> initializer specifying the dismiss button, or have the way to initialize the <code>Alert</code>, providing the primary and secondary button.</p><p>Let's create a confirmation alert that would ask our users if they want to delete something from a list.</p><pre><code><span class="keyword">@State private var</span> showAlert = <span class="keyword">false
  
var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
    <span class="type">Button</span>(<span class="string">"Show alert"</span>) {
      showAlert = <span class="keyword">true</span>
    }
    .<span class="call">alert</span>(isPresented: $showAlert) {
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Do you want to delete this item?"</span>),
        primaryButton: .<span class="call">cancel</span>(),
        secondaryButton: .<span class="call">destructive</span>(<span class="type">Text</span>(<span class="string">"Delete"</span>)) {
          <span class="call">print</span>(<span class="string">"Delete item"</span>)
        }
      )
    }
  }
}
</code></pre><p>Let's unwrap the code. To show the alert, we are using our first approach with the view state variable that indicates when we want to show the alert on the screen.</p><p>Inside the <code>.alert</code> view modifier where we are constructing the <code>Alert</code> representation, we see that we are using a different initializer to provide information about alert buttons. That is a specific <a href="https://developer.apple.com/documentation/swiftui/alert/button">button</a> that represents an operation of an alert. There are four different styles of buttons we could use in SwiftUI:</p><ul><li>default;</li><li>cancel - indicates cancellation with a system provided label;</li><li>cancel - similar like above, but with a custom label;</li><li>destructive - indicates destructive action, for example, deletion.</li></ul><p>We are using the cancel and destructive button styles for our confirmation alert because our users could cancel or delete the item from a list.</p><img src="https://kristaps.me/assets/swiftui-alert/alert-buttons.png" alt="Alert with buttons"/><h2>Show multiple alerts</h2><p>To show multiple alerts on a view, we have two ways.</p><h3>Using state variables</h3><p>The first is to keep a view state variable per each alert. But we need to add the <code>.alert</code> modifier, not for the full view, but we can add it, for example, for the button that invokes the alert. If we add two <code>.alert</code> modifiers one after another, the SwiftUI layout engine will show only the first one.</p><pre><code><span class="keyword">@State var</span> firstAlertShown = <span class="keyword">false
@State var</span> secondAlertShown = <span class="keyword">false

var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
    <span class="type">Button</span>(<span class="string">"Show first alert"</span>) {
      firstAlertShown = <span class="keyword">true</span>
    }
    .<span class="call">alert</span>(isPresented: $firstAlertShown) {
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"First alert"</span>))
    }

    <span class="type">Button</span>(<span class="string">"Show second alert"</span>) {
      secondAlertShown = <span class="keyword">true</span>
    }
    .<span class="call">alert</span>(isPresented: $secondAlertShown) {
      <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Second alert"</span>))
    }
  }
}
</code></pre><h3>Using identifiable state variable</h3><p>I like the second approach much better - it is more type safe. At first, we need to set up a structure representing the alert that conforms to the <code>Identifiable</code> protocol. Inside this structure, we have a local enumeration type representing all alerts types we would like to show and return the specific alert view. Ideally, it should be separated, but to show this example, I kept it like this.</p><pre><code><span class="keyword">struct</span> AlertIdentifier: <span class="type">Identifiable</span> {
  <span class="keyword">enum</span> ActiveAlert {
    <span class="keyword">case</span> first
    <span class="keyword">case</span> second

    <span class="keyword">var</span> alertView: <span class="type">Alert</span> {
      <span class="keyword">switch self</span> {
      <span class="keyword">case</span> .<span class="dotAccess">first</span>:
        <span class="keyword">return</span> <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"First alert"</span>))
      <span class="keyword">case</span> .<span class="dotAccess">second</span>:
        <span class="keyword">return</span> <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Second alert"</span>))
      }
    }
  }

  <span class="keyword">var</span> id: <span class="type">ActiveAlert</span>
}
</code></pre><p>Next, we want to create the SwiftUI view and use it. Our view would have the local state variable with our new <code>AlertIdentifier</code> type when invoking and constructing the alert. We can use it and the computed <code>alertView</code> property that we had built before inside the <code>ActiveAlert</code> enum.</p><pre><code><span class="keyword">struct</span> MultipleAlertsViewIdentifiable: <span class="type">View</span> {
  <span class="keyword">@State var</span> alert: <span class="type">AlertIdentifier</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Button</span>(<span class="string">"Show first alert"</span>) {
        alert = <span class="type">AlertIdentifier</span>(id: .<span class="dotAccess">first</span>)
      }

      <span class="type">Button</span>(<span class="string">"Show second alert"</span>) {
        alert = <span class="type">AlertIdentifier</span>(id: .<span class="dotAccess">second</span>)
      }
    }
    .<span class="call">alert</span>(item: $alert) {
      $0.<span class="property">id</span>.<span class="property">alertView</span>
    }
  }
}
</code></pre><p>A lot to unpack here, but the main point is that it's safe to show multiple alerts on the same view without adding a state variable for each alert. Using this approach, we don't need to worry if our alert would be shown to the user because we don't have multiple <code>.alert</code> view modifiers scattered around the view itself.</p><h2>TL;DR</h2><p>Showing an alert to inform our app users or ask for confirmation is essential for the user interface. We can show the alert with SwiftUI in two ways. The first one is by using a state variable that indicates if the alert is visible. The second uses an identifiable state variable that can be used to populate the alert title, message, and buttons.</p><p>We can set up multiple types of buttons for the alert. If we would like to show more than two, we need to use the SwiftUI sheets.</p><p>To present multiple alerts in the same view, we can achieve it either by multiple view state variables or by using one identifiable structure that would be responsible for creating the alert itself.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/swiftui-alert">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/alert">Alert official documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/alert/button">Alert Button official documentation</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-show-an-alert">How to show an alert</a></li><li><a href="https://www.hackingwithswift.com/books/ios-swiftui/working-with-identifiable-items-in-swiftui">Working with Identifiable items in SwiftUI</a></li><li><a href="http://www.thomashanning.com/swiftui-alert/">SwiftUI: Alert</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-text-in-circle</guid><title>How to show text inside a circle with SwiftUI</title><description>This time, we will look at several ways to show a text label inside a circle using SwiftUI. We will dig deeper into three different ways using the `ZStack` view and `.background` and `.overlay` modifiers. As a small bonus, we will check out how to present a text label over a circle using the `.clipShape` modifier.</description><link>https://kristaps.me/blog/swiftui-text-in-circle</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This time, we will look at a couple of ways to show a text label inside a circle using SwiftUI. We will dig deeper into three different ways using the <code>ZStack</code> view, <code>.background</code> and <code>.overlay</code> modifiers. In the end, as a small bonus, we will check out how to present a text label over a circle using the <code>.clipShape</code> modifier.</p><p>Our end goal is something like this:</p><img src="https://kristaps.me/assets/text-inside-circle-swiftui/text-inside-circle-swiftui.png" alt="Text inside a circle"/><h2>Layout out with <code>ZStack</code></h2><p><code>ZStack</code> in SwiftUI is a unique view that shows all its children on top of each other. It works similarly to <code>z-index</code> in CSS. So let's try to show a <code>Circle</code> view and then the <code>Text</code> view on top. To not allow the <code>Circle</code> to fill the whole screen, we need to set a constant view width and height.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">Circle</span>()
    .<span class="call">stroke</span>(circleColor, lineWidth: <span class="number">4</span>)
  
  <span class="type">Text</span>(<span class="string">"13"</span>)
}
.<span class="call">frame</span>(width: <span class="number">40</span>, height: <span class="number">40</span>)
</code></pre><h2>Practicing the <code>.background</code> modifier</h2><p>Now let's see how to use the <code>.background</code> modifier. Sadly Apple has not provided us with any documentation on how to use it, so we need to understand it ourselves the hard way. We can check out the source code and try to understand what is this view modifier doing.</p><pre><code><span class="keyword">func</span> background&lt;Background&gt;(<span class="keyword">_</span> background: <span class="type">Background</span>, alignment: <span class="type">Alignment</span> = .<span class="dotAccess">center</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> <span class="keyword">where</span> <span class="type">Background</span> : <span class="type">View</span>
</code></pre><p>By applying this modifier, we need to pass in a <code>View</code> and optionally specify the alignment in both axes. Let's set how can we use it for our <code>Text</code> field. This time we are not going to check out the <code>alignment</code> parameter. We want to show a circle as a background for the <code>Text</code> field.</p><pre><code><span class="type">Text</span>(<span class="string">"13"</span>)
  .<span class="call">background</span>(
    <span class="type">Circle</span>()
      .<span class="call">stroke</span>(circleColor, lineWidth: <span class="number">4</span>)
      .<span class="call">padding</span>(<span class="number">6</span>)
  )
</code></pre><img src="https://kristaps.me/assets/text-inside-circle-swiftui/text-inside-circle-swiftui-no-padding.png" alt="Text inside a circle without padding"/><p>The outcome is not exactly what we wanted. To improve it, we need some space between the text and the circle to look a bit better.</p><p>To have a nice gap between the number and the circle, we could use the <code>.padding()</code> modifier. Now the text and the circle have some room to breathe between them.</p><pre><code><span class="type">Text</span>(<span class="string">"13"</span>)
  .<span class="call">padding</span>()
  .<span class="call">background</span>(
    <span class="type">Circle</span>()
      .<span class="call">stroke</span>(circleColor, lineWidth: <span class="number">4</span>)
      .<span class="call">padding</span>(<span class="number">6</span>)
  )
</code></pre><img src="https://kristaps.me/assets/text-inside-circle-swiftui/text-inside-circle-swiftui.png" alt="Text inside a circle with padding"/><h2>Untangling the <code>overlay</code> modifier</h2><p>This time Apple hasn't provided documentation explanation again. Let's read the source code. It is relatively straight forward and similar to <code>.background</code> modifier.</p><pre><code><span class="keyword">func</span> overlay&lt;Overlay&gt;(<span class="keyword">_</span> overlay: <span class="type">Overlay</span>, alignment: <span class="type">Alignment</span> = .<span class="dotAccess">center</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> <span class="keyword">where</span> <span class="type">Overlay</span> : <span class="type">View</span>
</code></pre><p>It places the view on top of it, not under. We should not forget about the <code>.padding()</code> modifier to have a gap between the number and the circle. Using the previous example and changing <code>background</code> to <code>overlay</code> we have the same outcome.</p><pre><code><span class="type">Text</span>(<span class="string">"13"</span>)
  .<span class="call">padding</span>()
  .<span class="call">overlay</span>(
    <span class="type">Circle</span>()
      .<span class="call">stroke</span>(circleColor, lineWidth: <span class="number">4</span>)
      .<span class="call">padding</span>(<span class="number">6</span>)
  )
</code></pre><p>Although it looks identical, it works differently. This approach comes in handy if we would like to show an interactable view on top. Let's say we would like to present a tappable button on top. I wouldn't specifically advise doing so, but it explains the idea.</p><h2>Bonus: Clipping as Shape</h2><p>As a bonus tip, let's check out how we can use the <code>.clipShape</code> modifier to show a text field inside the circle filled with a color. The <code>.clipShape</code> modifier clips the view to a specific shape that we should pass as a parameter. For that, we can use a couple of shapes provided by Apple like circles, capsules, rectangles, and <a href="https://developer.apple.com/documentation/swiftui/shape">more</a>. Or we can draw a shape ourselves with the help of the <code>Path</code> outline. Custom shapes we are leaving out of the scope of this blog post.</p><pre><code><span class="type">Text</span>(<span class="string">"13"</span>)
  .<span class="call">padding</span>()
  .<span class="call">background</span>(circleColor)
  .<span class="call">clipShape</span>(<span class="type">Circle</span>())
</code></pre><img src="https://kristaps.me/assets/text-inside-circle-swiftui/text-on-circle-swiftui.png" alt="Text on top of a circle"/><h2>TL;DR</h2><p>With SwiftUI achieving the same thing visually can be done in various ways. Placing a circle around the text can be done either stacking all the views on top of them using <code>ZStack</code>. Another approach is using <code>.background</code> or <code>.overlay</code> modifier.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/text-in-circle-swiftui">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/zstack"><code>ZStack</code> documentation</a></li><li><a href="https://developer.apple.com/documentation/swiftui/view/clipshape(_:style:"><code>clipShape</code> documentation</a>)</li><li><a href="https://developer.apple.com/documentation/swiftui/shape">Shape documentation</a></li><li><a href="https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes">Drawing Paths and Shapes tutorial</a></li><li><a href="https://developer.apple.com/documentation/swiftui/path">Path documentation</a></li><li><a href="https://ordinarycoding.com/articles/swiftui-masks-and-overlays/">SwiftUI masks and overlays</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-select-image-with-phpickerviewcontroller</guid><title>How to select images using PHPickerViewController with SwiftUI</title><description>Selecting images from our iPhone library is needed when changing a profile picture, posting an update, or sharing the photo of your pet. In this post, we are going to look into how to use `PHPickerViewController` with SwiftUI. Apple announced this view controller at WWDC2020.</description><link>https://kristaps.me/blog/swiftui-select-image-with-phpickerviewcontroller</link><pubDate>Sat, 9 Jan 2021 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Selecting images from our iPhone library is needed when changing a profile picture, posting an update, or sharing the photo of your pet. In this post, we are going to look into how to use <code>PHPickerViewController</code> with SwiftUI. Apple announced this view controller at <a href="https://developer.apple.com/wwdc20/">WWDC2020</a>.</p><h2>What is PHPickerViewController?</h2><p><code>PHPickerViewController</code> is a view controller that gives way for our app users to pick assets from their photo library. It provides a well-known user interface, and we don’t need to bother about building that.</p><p>One nicety that comes with this approach is that we don’t need to worry about adding information to access our user’s photo library in <code>Info.plist</code> file. Users can decide to allow access either to all photo library or selectively grant access to particular photos. That solves privacy concerns where apps could read the whole library and even <a href="https://krausefx.com/blog/ios-privacy-detectlocation-an-easy-way-to-access-the-users-ios-location-data-without-actually-having-access">track people</a>.</p><h3>Creating a <code>PHPickerViewController</code></h3><p>To create a <code>PHPickerViewController</code> we need to initialize it by passing configuration, which is an instance of <code>PHPickerConfiguration</code>. For the configuration, we need to specify what type of pictures we want and set the selection limit.</p><p>For the <code>PHPickerViewController</code> itself, we set the delegate that needs to implement <code>PHPickerViewControllerDelegate</code> protocol. It has just one method that gives a signal when our user has selected photos.</p><h2>Integrate with SwiftUI</h2><p>To use the <code>PHPickerViewController</code> in SwiftUI apps, we need to use the <code>UIViewControllerRepresentable</code> to represent an UIKit view controller. Let’s go over all the steps required in doing that.</p><h3>Setting up the UIKit view controller</h3><p><code>UIViewControllerRepresentable</code> is a protocol and requires to implement two methods:</p><ul><li><code>makeUIViewController</code> - create and configure the view controller;</li><li><code>updateUIViewControoler</code> - update the state of the view controller.</li></ul><p>We are going to create and configure the <code>PHPickerViewController</code> in the <code>makeUIViewController</code> method. We don’t need to update it, so we can leave the <code>updateUIViewControoler</code> empty.</p><pre><code><span class="keyword">struct</span> PhotoPicker: <span class="type">UIViewControllerRepresentable</span> {
  <span class="keyword">@Binding var</span> pickerResult: [<span class="type">UIImage</span>] <span class="comment">// pass images back to the SwiftUI view</span>
  <span class="keyword">@Binding var</span> isPresented: <span class="type">Bool</span> <span class="comment">// close the modal view</span>
  
  <span class="keyword">func</span> makeUIViewController(context: <span class="type">Context</span>) -&gt; <span class="keyword">some</span> <span class="type">UIViewController</span> {
    <span class="keyword">var</span> configuration = <span class="type">PHPickerConfiguration</span>(photoLibrary: <span class="type">PHPhotoLibrary</span>.<span class="call">shared</span>())
    configuration.<span class="property">filter</span> = .<span class="dotAccess">images</span> <span class="comment">// filter only to images</span>
    configuration.<span class="property">selectionLimit</span> = <span class="number">0</span> <span class="comment">// ignore limit</span>
    
    <span class="keyword">let</span> photoPickerViewController = <span class="type">PHPickerViewController</span>(configuration: configuration)
    photoPickerViewController.<span class="property">delegate</span> = context.<span class="property">coordinator</span> <span class="comment">// Use Coordinator for delegation</span>
    <span class="keyword">return</span> photoPickerViewController
  }
  
  <span class="keyword">func</span> updateUIViewController(<span class="keyword">_</span> uiViewController: <span class="type">UIViewControllerType</span>, context: <span class="type">Context</span>) { }
}
</code></pre><h3>Coordinator</h3><p>Now we can present the <code>PHPickerViewController</code>, but how can we transfer back the selected images? We need to use the <code>makeCoordinator</code> method and create the <code>Coordinator</code> class that implements the <code>PHPickerViewControllerDelegate</code> protocol. It is a thoughtful approach to how the SwiftUI can communicate with the UIKit delegation pattern idea.</p><pre><code><span class="keyword">struct</span> PhotoPicker: <span class="type">UIViewControllerRepresentable</span> {

  <span class="comment">// ...</span>

  <span class="keyword">func</span> makeCoordinator() -&gt; <span class="type">Coordinator</span> {
    <span class="type">Coordinator</span>(<span class="keyword">self</span>)
  }
  
  <span class="comment">// Create the Coordinator, in this case it is a way to communicate with the PHPickerViewController</span>
  <span class="keyword">class</span> Coordinator: <span class="type">PHPickerViewControllerDelegate</span> {
    <span class="keyword">private let</span> parent: <span class="type">PhotoPicker</span>
    
    <span class="keyword">init</span>(<span class="keyword">_</span> parent: <span class="type">PhotoPicker</span>) {
      <span class="keyword">self</span>.<span class="property">parent</span> = parent
    }
    
    <span class="keyword">func</span> picker(<span class="keyword">_</span> picker: <span class="type">PHPickerViewController</span>, didFinishPicking results: [<span class="type">PHPickerResult</span>]) {
    }
  }
}
</code></pre><h2>Using UIKit with SwiftUI</h2><p>Let’s put it all together. We need to create a SwiftUI view to present the photo picker view and present it as a modal. You can read more about how to display a modal view in SwiftUI in my <a href="https://kristaps.me/blog/swiftui-modal-view/">previous post</a>.</p><pre><code>.<span class="call">sheet</span>(isPresented: $photoPickerIsPresented) {
  <span class="comment">// Present the photo picker view modally</span>
  <span class="type">PhotoPicker</span>(pickerResult: $pickerResult,
              isPresented: $photoPickerIsPresented)
}
</code></pre><h3>Passing data from UIKit to SwiftUI</h3><p>To get photos of what users have selected, let’s use <code>@State</code> variable and pass it to the <code>PhotoPicker</code> view using <code>@Binding</code> <a href="https://swiftuipropertywrappers.com/#binding">property wrapper</a>.</p><p>Now we can fully complete the <code>PHPickerViewControllerDelegate</code> protocol for our <code>Coordinator</code> class.</p><pre><code><span class="keyword">func</span> picker(<span class="keyword">_</span> picker: <span class="type">PHPickerViewController</span>, didFinishPicking results: [<span class="type">PHPickerResult</span>]) {
  parent.<span class="property">pickerResult</span>.<span class="call">removeAll</span>() <span class="comment">// remove previous pictures from the main view
  
  // unpack the selected items</span>
  <span class="keyword">for</span> image <span class="keyword">in</span> results {
    <span class="keyword">if</span> image.<span class="property">itemProvider</span>.<span class="call">canLoadObject</span>(ofClass: <span class="type">UIImage</span>.<span class="keyword">self</span>) {
      image.<span class="property">itemProvider</span>.<span class="call">loadObject</span>(ofClass: <span class="type">UIImage</span>.<span class="keyword">self</span>) { [<span class="keyword">weak self</span>] newImage, error <span class="keyword">in
        if let</span> error = error {
          <span class="call">print</span>(<span class="string">"Can't load image</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>)
        } <span class="keyword">else if let</span> image = newImage <span class="keyword">as</span>? <span class="type">UIImage</span> {
          <span class="comment">// Add new image and pass it back to the main view</span>
          <span class="keyword">self</span>?.<span class="property">parent</span>.<span class="property">pickerResult</span>.<span class="call">append</span>(image)
        }
      }
    } <span class="keyword">else</span> {
      <span class="call">print</span>(<span class="string">"Can't load asset"</span>)
    }
  }
  
  <span class="comment">// close the modal view</span>
  parent.<span class="property">isPresented</span> = <span class="keyword">false</span>
}
</code></pre><p>What we are doing here is unpacking selected items from the photo library and set them to the parent’s <code>@Binding</code> variable. By doing so, we are transferring the data back to the main view.</p><h3>Present the selected images</h3><p>To present the picked photos, we can iterate over and show them in a <code>ScrollView</code>.</p><pre><code><span class="type">ScrollView</span> {
  <span class="type">ForEach</span>(pickerResult, id: \.<span class="keyword">self</span>) { uiImage <span class="keyword">in</span>
    <span class="type">ImageView</span>(uiImage: uiImage)
  }
}
</code></pre><p>An important fact is that the type of image is <code>UIImage</code>, but luckily SwiftUI provides a nice initializer for the <code>Image</code> view passing the <code>UIImage</code> type.</p><p>You can check out the full implementation <a href="https://github.com/fassko/PHPickerViewController-SwiftUI">here</a>.</p><h2>TL;DR</h2><p>Selecting images and using them in our apps is an essential feature in modern iOS applications. Apple announced in WWDC2020 a new way to do it in a more secure and granular way - <code>PHPickerViewController</code>. Note that it is available only from iOS14 and later versions.</p><p>To use the <code>PHPickerViewController</code> with SwiftUI, we need to implement the <code>UIViewControllerRepresentable</code> protocol. It allows communicating from and to UIKit view controllers flawlessly.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/PHPickerViewController-SwiftUI">Sample code</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/photokit/phpickerviewcontroller">PHPickerViewController documentation</a></li><li><a href="https://krausefx.com/blog/ios-privacy-detectlocation-an-easy-way-to-access-the-users-ios-location-data-without-actually-having-access">iOS Privacy: detect.location - An easy way to access the user's iOS location data without actually having access</a></li><li><a href="https://www.kairadiagne.com/2020/11/04/adopting-the-new-photo-picker.html">Adopting the new PHPicker</a></li><li><a href="https://nemecek.be/blog/30/checking-out-the-new-phpickerviewcontroller-in-ios-14-to-select-photos-or-videos">Checking out the new PHPickerViewController in iOS 14</a></li><li><a href="https://ohmyswift.com/blog/2020/08/29/replacing-uiimagepickercontroller-with-phpickerviewcontroller/">Replacing UIImagePickerController with PHPickerViewController</a></li><li><a href="https://christianselig.com/2020/09/phpickerviewcontroller-efficiently/">Using PHPickerViewController Images in a Memory-Efficient Way</a></li><li><a href="https://codakuma.com/the-library-is-open/">Accessing the photo library in SwiftUI</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/background-swiftui</guid><title>Background Color with SwiftUI</title><description>Once you create a SwiftUI view, it has the default background color. White for light mode and black for dark mode respectively. But how to change it to something different? Let's look into that today.</description><link>https://kristaps.me/blog/background-swiftui</link><pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Once you create a SwiftUI view, it has the default background color. White for light mode and black for dark mode respectively. But how to change it to something different? Let's look into that today.</p><p>In this article, we will talk about different techniques that we can use to change the default background for our SwiftUI views.</p><h2>Using modifier</h2><p>First approach that comes in mind is using <code>.background()</code> <a href="http://apple.co/3mSzqar">modifier</a>. Sadly Apple hasn't provided documentation for this. It takes in a view that is set as a background for the view we are adding this modifier to.</p><p>In this case, we want to change the background color. We can pass in, for instance, <code>Color.gray</code>.</p><pre><code><span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
  .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">gray</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/text-background-color.png" alt="Text background color"/><p>We see that it sets the background color only for the text view. That is how SwiftUI works. We want to set it for the whole screen. We could approach it using <code>VStack</code>, <code>HStack</code>, and a couple of <code>Spacer()</code> views.</p><pre><code><span class="type">VStack</span> {
  <span class="type">Spacer</span>()
  <span class="type">HStack</span> {
    <span class="type">Spacer</span>()
    <span class="type">Text</span>(<span class="string">"Test"</span>)
    <span class="type">Spacer</span>()
  } 
  <span class="type">Spacer</span>()
}.<span class="call">background</span>(<span class="type">Color</span>.<span class="property">gray</span>)
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/text-background-safearea.png" alt="Text background color not extending safe area"/><p>It looks a bit better, but we want to set it for the whole screen, ignoring the safe area. We can do it using <code>.edgesIgnoringSafeArea</code> <a href="http://apple.co/38HHk1c">modifier</a>. Using this modifier, we can tell the SwiftUI layout engine to extend outside the screen's safe area. It takes in a parameter that defines which edges we can expand. In this case, we will pass in <code>.all</code>.</p><pre><code>.<span class="call">background</span>(<span class="type">Color</span>.<span class="property">gray</span>.<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>))
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/text-background-color-fullscreen.png" alt="Text background color fullscreen"/><p>It looks exactly how we wanted. The issue is that the code is quite cumbersome and has a lot of nesting views and spacers. Let's look at it in another way. ​</p><h2>Using <code>ZStack</code></h2><p>We could dramatically improve the code readability and complexity is to utilize the <code>ZStack</code> <a href="https://developer.apple.com/documentation/swiftui/zstack">view</a>. Using this view, we can layer multiple views on top of each other. Our approach would be to add the background color and then the content on top of it.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">Color</span>.<span class="property">gray</span>
    .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
  
  <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
}
</code></pre><p>The code looks much cleaner now, and we have a gray background and text on top of it. The best part of this approach is that we ignore the safe area only for the background color view. Other views won't extend outside the safe area.</p><img src="https://kristaps.me/assets/swiftui-background-color/zstack-color.png" alt="Background color with ZStack"/><blockquote><p><a href="https://twitter.com/gimly">Dimi Chakarov</a> <a href="https://twitter.com/gimly/status/1347300659691999233">posted</a> about how to create <a href="https://gist.github.com/dchakarov/d841e709ccb0bcc961302b2a248912ec">a <code>ViewModifier</code> to apply to a view</a>.</p></blockquote><h2>Multiple colors</h2><p>Now that we know how to change background color to one single color, how about setting it to two colors vertically and horizontally? ​ We could achieve that by using the approach with <code>ZStack</code> and wrapping colors in a <code>VStack</code> <a href="https://developer.apple.com/documentation/swiftui/vstack">view</a> for vertical alignment or <code>HStack</code> <a href="https://developer.apple.com/documentation/swiftui/hstack">view</a> for vertical alignment.</p><h3>Vertical alignment</h3><p>Let's use two colors - gray and black. By wrapping them in <code>VStack</code> view and using <code>ZStack</code> we can split the screen in half vertically. One of them is filled with gray and the other with black color.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">VStack</span>(spacing: <span class="number">0</span>) {
    <span class="type">Color</span>.<span class="property">gray</span>
    <span class="type">Color</span>.<span class="property">black</span>
  }
  .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
}
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/vertical-alignment-background-colors.png" alt="Vertical alignment background colors"/><h3>Horizontal alignment</h3><p>By changing the <code>VStack</code> to <code>HStack</code> we can fill the screen horizontally with gray and black colors.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">HStack</span>(spacing: <span class="number">0</span>) {
    <span class="type">Color</span>.<span class="property">gray</span>
    <span class="type">Color</span>.<span class="property">black</span>
  }
  .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
}
</code></pre><img src="https://kristaps.me/assets/swiftui-background-color/horizontal-alignment-background-colors.png" alt="Horizontal alginment background colors"/><h3>Chess table background</h3><p>Let's do something a bit crazy by building a background that would look like a chess table. We can iterate a couple of times the previous example with multiple colors vertically and horizontally.</p><pre><code><span class="type">ZStack</span> {
  <span class="type">VStack</span>(spacing: <span class="number">0</span>) {
    <span class="type">ForEach</span>((<span class="number">1</span>...<span class="number">10</span>).<span class="call">reversed</span>(), id: \.<span class="keyword">self</span>) { i <span class="keyword">in</span>
      <span class="type">HStack</span>(spacing: <span class="number">0</span>) {
        <span class="type">ForEach</span>((<span class="number">1</span>...<span class="number">5</span>).<span class="call">reversed</span>(), id: \.<span class="keyword">self</span>) { i <span class="keyword">in</span>
          <span class="type">Color</span>.<span class="property">gray</span>
          <span class="type">Color</span>.<span class="property">black</span>
        }
      }
      <span class="type">HStack</span>(spacing: <span class="number">0</span>) {
        <span class="type">ForEach</span>((<span class="number">1</span>...<span class="number">5</span>).<span class="call">reversed</span>(), id: \.<span class="keyword">self</span>) { i <span class="keyword">in</span>
          <span class="type">Color</span>.<span class="property">black</span>
          <span class="type">Color</span>.<span class="property">gray</span>
        }
      }
    }
  }.<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
}
</code></pre><p>Here we see the power of the SwiftUI layout engine and Swift code combined.</p><img src="https://kristaps.me/assets/swiftui-background-color/chess-background.png" alt="Chess table background"/><h2>TL;DR</h2><p>SwiftUI views come with default background color - white on light mode and black in dark mode. In many cases, we would like to change it to something else. The first way would be to use the <code>.background</code> modifier and pass <code>Color</code>which is a view in SwiftUI. The second approach would be using <code>ZStack</code> and add one color or multiple colors wrapped in <code>VStack</code> for vertical and <code>HStack</code> for horizontal layout. ​ If you have other ideas about changing the background color for a SwiftUI view, let me know. Thank you for reading.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/swiftui-view-background-color">Sample code</a></li></ul><ul><li><a href="https://www.hackingwithswift.com/books/ios-swiftui/colors-and-frames">Colors and frames</a></li><li><a href="https://www.ioscreator.com/tutorials/swiftui-background-color-tutorial">SwiftUI Background Color Tutorial</a></li><li><a href="http://apple.co/3mSzqar"><code>.background</code> modifier</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-modal-view</guid><title>How to deal with modal views (a.k.a. sheets) with SwiftUI</title><description>When presenting a small piece of extra information on the screen, showing a modal view is essential. With UIKit, we could do this with `presentViewController:animated:completion:` [function](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621380-presentviewcontroller). However, using SwiftUI, we need to twist our thinking towards using view or environment state, as the modal view is now called a sheet.</description><link>https://kristaps.me/blog/swiftui-modal-view</link><pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>When presenting a small piece of extra information on the screen, showing a modal view is essential. With UIKit, we could do this with <code>presentViewController:animated:completion:</code> <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621380-presentviewcontroller">function</a>.</p><p>However, using SwiftUI, we need to twist our thinking towards using view or environment state, as the modal view is now called a sheet.<br><br>Let's check it out in detail.</p><blockquote><p>Thank you <a href="https://twitter.com/janiskirsteins">Jānis Kiršteins</a> for a great <a href="https://twitter.com/janiskirsteins/status/1337398222386434053">suggestion</a> to use <code>@ViewBuilder</code> instead of <code>AnyView</code>.</p></blockquote><h2>Open modal view (a.k.a. sheet)</h2><p>SwiftUI sheets help us show a modal view to users. <code>sheet</code> is an instance method to the <a href="https://developer.apple.com/documentation/swiftui/view-presentation">View Presentation</a>. It describes how we can show our SwiftUI views, covering specific user journey scenarios.</p><p>Let's say we want to display information about our app to users.</p><p>Firstly, we need to define whether the app should show a modal view or not, binding this with the <code>Bool</code> value.</p><p>The keyword here is 'should' because once we dismiss, the presented view value is set back to <code>false</code>. This value is decorated with a <code>@State</code> property wrapper, or could come from <code>ObservableObject</code> ViewModel. For simplicity reasons, we're not going to talk about ViewModels in this post.</p><p>Secondly, we need to change the view or, in some cases, the environment state. Once we are using the <code>@State</code> property wrapper, we can just set it to <code>true</code> and SwiftUI will do the rest to present the modal view.</p><p>Let’s look how we can do it in the code:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showInfoModalView: <span class="type">Bool</span> = <span class="keyword">false
  
  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Main View"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        showInfoModalView = <span class="keyword">true</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Info View"</span>, systemImage: <span class="string">"info.circle"</span>)
      })
    }
    .<span class="call">sheet</span>(isPresented: $showInfoModalView) {
      <span class="type">InfoView</span>()
    }
  }
}
</code></pre><p>When we run the app, we can now open the modal view and see the detailed information.</p><img src="https://kristaps.me/assets/img/modal-view-swiftui/show-modal-view.gif" alt="Show Modal View"/><h2>Close modal view programmatically</h2><p>Our app users can simply slide the modal view down, and it will hide with a nice animation. Set the state to false to hide this from the view responsible for showing the modal view.</p><p>Now is the question of how to do it from the modal view itself? We have these two options at our disposal:</p><ul><li>using <code>@Environment</code> property <code>presentationMode</code>;</li><li>passing the state to the modal view as binding.</li></ul><h3>Using Environment</h3><p>Property wrapper <code>@Environment</code> allows us to read and change the values of the view environment state. To hide the modal view, we need to change the <code>presentationMode</code> property. At first, we need to define our view. To do this, we add it to the modal view properties. To dismiss the modal view, we need to alter the presentation mode wrapped value.</p><pre><code><span class="keyword">struct</span> InfoView: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">presentationMode</span>) <span class="keyword">var</span> presentationMode
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Information view."</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        presentationMode.<span class="property">wrappedValue</span>.<span class="call">dismiss</span>()
      }, label: {
        <span class="type">Label</span>(<span class="string">"Close"</span>, systemImage: <span class="string">"xmark.circle"</span>)
      })
    }
  }
}
</code></pre><p>This method is quite cumbersome, and dealing with environmental properties can cause accidental issues that are difficult to track down and debug.</p><h3>Using a binding</h3><p>Using a binding between the view that is presenting the modal view and the modal view itself is another method to hide it from the code.</p><p>First, we need to add a new property to the modal view structure using <code>@Binding</code> property wrapper. This describes that this value comes from somewhere else outside the view scope.</p><pre><code><span class="keyword">struct</span> InfoView: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> isPresented: <span class="type">Bool</span>
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Information view."</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        isPresented = <span class="keyword">false</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Close"</span>, systemImage: <span class="string">"xmark.circle"</span>)
      })
    }
  }
}
</code></pre><p>Now when we are initializing the <code>ModalView</code> we need to pass the <code>isPresented</code>:</p><pre><code>.<span class="call">sheet</span>(isPresented: $showInfoModalView) {
  <span class="type">InfoView</span>(isPresented: $showInfoModalView)
}
</code></pre><p>Using this approach, we are sure that this variable only belongs to these two views. It is more straightforward to test and debug.</p><h2>Multiple sheets on one SwiftUI view</h2><p>Now we know how to present a modal view, but how can we show multiple modal views?</p><p>Imagine we would like to present information about the app and the settings view from the primary app view.<br><br>We can do this using these two approaches:</p><ul><li>using multiple sheets presenting functions;</li><li>using <code>Identifiable</code> enum to keep the state of the currently shown sheet.</li></ul><h3>Multiple sheet functions in one SwiftUI view</h3><p>We can attach <code>sheet</code> function to any SwiftUI view or control, for instance to the <code>Button</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showInfoModalView: <span class="type">Bool</span> = <span class="keyword">false
  @State var</span> showSettingsModalView: <span class="type">Bool</span> = <span class="keyword">false
  
  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Main View"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        showInfoModalView = <span class="keyword">true</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Info View"</span>, systemImage: <span class="string">"info.circle"</span>)
      })
      .<span class="call">sheet</span>(isPresented: $showInfoModalView) {
        <span class="type">InfoView</span>()
      }
      
      <span class="type">Button</span>(action: {
        showSettingsModalView = <span class="keyword">true</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Settings View"</span>, systemImage: <span class="string">"gear"</span>)
      })
      .<span class="call">sheet</span>(isPresented: $showSettingsModalView) {
        <span class="type">SettingsView</span>()
      }
    }
  }
}
</code></pre><p>It can be fine to have two buttons, but let's say we have more than that. It can get quite messy, so we should deal with many <code>@State</code> variables.</p><h3>Using enumeration of all modal views</h3><p>If we look at Apple's official documentation, there is another <a href="https://developer.apple.com/documentation/swiftui/view/actionsheet(item:content:">function</a>) to show a sheet. Let's try to use it.</p><p>At first, we will define an <code>enum</code> with all modal view options:</p><pre><code><span class="keyword">enum</span> Sheet: <span class="type">Identifiable</span> {
  <span class="keyword">case</span> info
  <span class="keyword">case</span> settings
}
</code></pre><p>Now we can use this in the SwiftUI view. We need a new <code>@State</code> variable with the optional type <code>Sheet</code> and to use this to determine which modal view we would like to present.</p><pre><code><span class="keyword">enum</span> Sheet: <span class="type">Identifiable</span> {
  <span class="keyword">case</span> info
  <span class="keyword">case</span> settings
  
  <span class="keyword">var</span> id: <span class="type">Int</span> {
    hashValue
  }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> activeSheet: <span class="type">Sheet</span>?
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(spacing: <span class="number">50</span>) {
      <span class="type">Text</span>(<span class="string">"Main View"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      
      <span class="type">Button</span>(action: {
        activeSheet = .<span class="dotAccess">info</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Info View"</span>, systemImage: <span class="string">"info.circle"</span>)
      })
      
      <span class="type">Button</span>(action: {
        activeSheet = .<span class="dotAccess">settings</span>
      }, label: {
        <span class="type">Label</span>(<span class="string">"Show Settings View"</span>, systemImage: <span class="string">"gear"</span>)
      })
    }
    .<span class="call">sheet</span>(item: $activeSheet) { sheet <span class="keyword">in
      switch</span> sheet {
      <span class="keyword">case</span> .<span class="dotAccess">info</span>:
        <span class="type">InfoView</span>()
      <span class="keyword">case</span> .<span class="dotAccess">settings</span>:
        <span class="type">SettingsView</span>()
      }
    }
  }
}
</code></pre><p>We don't need to stop here. We can declutter this code by adding a computed property to <code>Sheet</code> enum:</p><pre><code><span class="keyword">extension</span> <span class="type">Sheet</span> {
  <span class="keyword">@ViewBuilder
  var</span> modalView: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">switch self</span> {
    <span class="keyword">case</span> .<span class="dotAccess">info</span>:
      <span class="type">InfoView</span>()
    <span class="keyword">case</span> .<span class="dotAccess">settings</span>:
      <span class="type">SettingsView</span>()
    }
  }
}
</code></pre><p>Then we can use it when opening the sheet:</p><pre><code>   .<span class="call">sheet</span>(item: $activeSheet) { $0.<span class="property">modalView</span> }
</code></pre><p>Using the fancy new keypaths functionality in closures, we can simplify this even more:</p><pre><code>   .<span class="call">sheet</span>(item: $activeSheet, content: \.<span class="property">modalView</span>)
</code></pre><p>One caveat to this approach is that we need to change part of our process to hide the view from the code. To do this, we set it to <code>nil</code> instead of <code>false</code>.</p><p>This approach is much safer, because we use the enumeration type to keep everything well organized.</p><p>Let's see it in action.</p><img src="https://kristaps.me/assets/img/modal-view-swiftui/show-multiple-modal-views-close.gif" alt="Show Modal View"/><h2>TL;DR</h2><p>Modal views in SwiftUI are presented using the sheet modifier on a view or control. The simplest way is to have <code>@State</code> property to indicate when it should be visible.</p><p>To hide the modal view, we can use the environment parameter or pass a binding to the modal view object. Showing multiple sheets can be achieved either with multiple sheet modifiers or using an object with all possible modal view enumerations.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/ModalViewApp">Demo app - there are multiple branches for everything we talked about</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/view/sheet(ispresented:ondismiss:content:">Apple official documention</a>)</li><li><a href="https://www.simpleswiftguide.com/how-to-present-sheet-modally-in-swiftui/">How to present a sheet modally in SwiftUI</a></li><li><a href="https://swiftwithmajid.com/2019/07/24/alerts-actionsheets-modals-and-popovers-in-swiftui/">Alerts, Action Sheets, Modals and Popovers in SwiftUI</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-present-a-new-view-using-sheets">How to present a new view using sheets</a></li><li><a href="https://masilotti.com/multiple-sheets-swiftui/">How to manage multiple sheets in SwiftUI</a></li><li><a href="https://stackoverflow.com/questions/58837007/multiple-sheetispresented-doesnt-work-in-swiftui">Thread in StackOverflow</a></li><li><a href="https://www.youtube.com/watch?feature=player_embedded&v=7dZfpAn_P2g">Enums for Multiple Sheets</a></li><li><a href="https://github.com/davdroman/MultiSheet">MultiSheet</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-launch-screen</guid><title>Launch Screen with SwiftUI</title><description>Launch  Screen is the first interaction that users see when using our apps. That's why investing time in making our app launch screens feel responsive and visually appealing is important. We are playing with the perceived time and it can be a great first impression.</description><link>https://kristaps.me/blog/swiftui-launch-screen</link><pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Launch Screen is the first interaction that users see when using our apps. That's why investing time in making our app launch screens feel responsive and visually appealing is important. We are playing with the perceived time and it can be a great first impression.</p><p>Apple in the last WWDC 2020 introduced a new way how to implement launch screen for SwiftUI apps in iOS 14 using Xcode 12. When we create a new SwiftUI app, this is the new way to make launch screens. We can still use the old way with the Storyboard launch screen with our existing apps.</p><h2>Launch Screen in Info.plist</h2><p>All the setup is done in the Info.plist file. We can see that there is an empty key <code>Launch Screen</code> with the Dictionary type. When we press the plus button there are a couple of options.</p><img src="https://kristaps.me/assets/img/swiftui-launch-screen/launch-screen-info.plist.png" alt="Info.plist Launch Screen Dictionary options"/><p>Now let's go over all of these options and learn how we can use them to set up our Launch Screens.</p><h2>Background color</h2><p>At first, we can change the launch screen background color. It is a <code>String</code> value of the color name from the Asset catalog. By default, iOS is using the <code>systemBackground</code> color.</p><p>Let's add a new Color Set in our Assets catalog and name it <code>launchScreenBackground</code>:</p><img src="https://kristaps.me/assets/img/swiftui-launch-screen/color-assets-catalog.png" alt="Color in Assets Catalog"/><p>Then we can add a new key <code>launchScreenBackground</code> to the <code>Launch Screen</code> dictionary in the Info.plist file. Now when we run the app we'll see this color background on the launch screen.</p><h2>Background Image</h2><p>After the background color is set let's show an image in front of it. There are two options we can use to configure that:</p><ul><li><code>Image Name</code> is an image name from the Assets catalog.</li><li><code>Image respects safe area insets</code> is a <code>Boolean</code> describing if the image needs to respect the safe area, respectively it won't go outside the safe area borders.</li></ul><p>Let's say we have a Swift logo in the Assets catalog which is an SVG file. In Xcode 12 SVG images are fully supported (finally). The name for this image is <code>swift</code>:</p><img src="https://kristaps.me/assets/img/swiftui-launch-screen/swift-logo-assets.png" alt="Swift logo in Assets Catalog"/><p>Now we can add the image in the Info.plist in the <code>Launch Screen</code> dictionary using the key <code>Image Name</code>. By setting the <code>Image respects safe area insets</code> option to <code>true</code> we are sure that it scales correctly and does not go outside the safe area. The image is in SVG file format and scales perfectly without sacrificing the image quality.</p><p>Now when launching the app we can see the background color and the Swift logo on top of it.</p><img src="https://kristaps.me/assets/img/swiftui-launch-screen/launch-screen-swift-logo.png" alt="Swift logo on the Launch Screen"/><h2>Extra options</h2><p>There are a couple of options more we can use to configure the Launch Screen:</p><ul><li><code>Show Navigation bar</code> - show the navigation bar with an image.</li><li><code>Show Tab bar</code> - show the tab ar with an image.</li><li><code>Show Toolbar</code> - show the toolbar with an image.</li></ul><p>This time we won't look more into these options, because most of the time the launch screen would consist of background color and image.</p><h2>TL;DR</h2><p>Launch screen "perceived time" should feel fast for the user.</p><p>In WWDC 2020 Apple introduced a new way for SwiftUI apps on how to create the launch screens by using Info.plist and Assets catalog capabilities.</p><p>The old way with storyboard launch screens still works fine, but we can assume that in the future it may be deprecated.</p><h2>Links</h2><ul><li><a href="https://danielbernal.co/creating-a-launch-screen-with-swift-ui/">Launch Screens and the SwiftUI App Life Cycle on iOS 14</a></li><li><a href="https://wwdcbysundell.com/2020/launch-screen-info-plist/">Customize your app’s Launch Screen using its Info Plist</a></li><li><a href="https://www.avanderlee.com/xcode/launch-screen/">Launch screens in Xcode: All the options explained</a></li><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/launch-screen/">Human Interface Guidelines - Launch Screen</a></li><li><a href="https://useyourloaf.com/blog/dropping-launch-storyboards/">Dropping launch storyboards</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/custom-font-dynamic-type</guid><title>Use Custom Font with Dynamic Type in iOS apps</title><description>A while back we looked into dynamic type with the system font. This time we are going to check out how to use the dynamic type with a custom font in our iOS apps. Apple provides great APIs to make our apps accessible even if we're using custom font styles.</description><link>https://kristaps.me/blog/custom-font-dynamic-type</link><pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>A while back we <a href="https://kristaps.me/embracing-dynamic-type/">looked into</a> dynamic type with the system font. This time we are going to check out how to use the dynamic type with a custom font in our iOS apps. Apple provides great APIs to make our apps accessible even if we're using custom font styles.</p><h2>Add custom font to app</h2><p>At first, we need to add our custom font to the project. There are several steps involved so let's go over them.</p><p>We need to add a font file to the Xcode app project. Currently <strong>True Type Font</strong> (.ttf) and <strong>Open Type Font</strong> (.otf) files are being supported. Just drag and drop files in your XCode project. Be careful and select targets you want to use this font in.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/add-custom-font-to-xcode.gif" alt="Add custom font to Xcode"/><p>If you forget to add the font to specific target membership in your Xcode project, you will run into an issue when the font file is not found.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/error-font-file-not-found.png" alt="Custom font not found"/><p>To fix that just check the checkbox and add it to your designated target.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/custom-font-xcode-target-membership.png" alt="Add custom font to target membership"/><p>After that is done head down to the <code>Info.plist</code> file and add a new entry with key <code>Fonts provided by application</code>. There we need to provide an array with all the font files we have added to the project.</p><p>Check that the font files have been added and that we can use this piece of code to print all available font families and names:</p><pre><code><span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>().<span class="call">forEach</span> { fontFamily <span class="keyword">in</span>
  <span class="call">print</span>(<span class="string">"Family:</span> \(fontFamily)<span class="string">"</span>)
  
  <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: fontFamily).<span class="call">forEach</span> { fontName <span class="keyword">in</span>
    <span class="call">print</span>(<span class="string">"name:</span> \(fontName)<span class="string">"</span>)
  }
}
</code></pre><p>Just paste this code in your <code>AppDelegate</code> <code>didFinishLaunchingWithOptions</code> and when you run the app it will print font families and names in the console.</p><h2>Use Custom Font with Dynamic type</h2><p>To use Dynamic Type with custom fonts we need to use <code>UIFontMetrics</code>. It is a utility object that helps to obtain custom fonts that scale accordingly to text size presences and accessibility settings. In other words, this class helps us to show the custom font taking into account user font and accessibility settings.</p><p>To do it at first we need to initialize an instance of a custom font with a concrete size. To determine specific size we can use the dynamic type sizes <a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/">table</a> from the human interface guidelines typography section.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/dynamic-type-sizes-ios.png" alt="Dynamic Type Sizes in iOS"/><p>Let’s say we have added a label that has a large title behavior, so it means we need to use a 34 point size font. Then we use <code>UIFontMetrics</code> and initialize an instance for a specific text style. In the end, we set the font for our label using the <code>scaledFont</code> function and provide our custom font.</p><pre><code><span class="keyword">guard let</span> font = <span class="type">UIFont</span>(name: <span class="string">"Proxima Nova-Regular"</span>, size: <span class="number">34</span>) <span class="keyword">else</span> {
  <span class="call">fatalError</span>(<span class="string">"Can't find the custom font"</span>)
}

<span class="keyword">let</span> fontMetrics = <span class="type">UIFontMetrics</span>(forTextStyle: .<span class="dotAccess">largeTitle</span>)
label.<span class="property">font</span> = fontMetrics.<span class="call">scaledFont</span>(for: font)
</code></pre><h2>Update upon Text Size changes</h2><p>To test how everything works we can enable text size in Xcode Environment Overrides.</p><img src="https://kristaps.me/assets/img/custom-dynamic-type/xcode-environment-overrides-dynamic-type.png" alt="Enable Dynamic Type in Xcode Environment OVerrides"/><p>If you change it you can notice that nothing is happening in our app. To enable automatic change we need to set <code>adjustsFontForContentSizeCategory</code>. It indicates that the object should automatically update it’s font when device category changes.</p><pre><code>label.<span class="property">adjustsFontForContentSizeCategory</span> = <span class="keyword">true</span>
</code></pre><p>Now we can fully test and we should see that our label font adjusts according to the text size and accessibility settings.<br>## TL;DR</p><p>Supporting Dynamic Type with custom font might sound like a tricky task to do, but it doesn't have to be. Using the <code>UIFontMetrics</code> utility object we can scale our custom font according to what the user has specified in text size or accessibility settings.</p><h2>Links</h2><ul><li><a href="https://github.com/fassko/custom-font-dynamic-type">Example app</a></li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2017/245/">Building Apps with Dynamic Type</a></li><li><a href="https://www.hackingwithswift.com/example-code/uikit/how-to-resize-a-custom-font-using-uifontmetrics">How to resize a custom font using UIFontMetrics</a></li><li><a href="https://useyourloaf.com/blog/using-a-custom-font-with-dynamic-type/">Using A Custom Font With Dynamic Type</a></li><li><a href="https://learnui.design/blog/ios-font-size-guidelines.html">The iOS Font Size Guidelines</a></li><li><a href="https://developer.apple.com/documentation/uikit/text_display_and_fonts/adding_a_custom_font_to_your_app">Adding a Custom Font to Your App</a></li><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/">Typography - Human Interface Guidelines</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/swiftui-mapview</guid><title>Mapview with SwiftUI</title><description>Finding places, navigating our way, or simply checking what's around - these are essential things that smartphones can help with. This year Apple added maps functionality to the SwiftUI framework. Let's check out how we can use it and what are the current problems.</description><link>https://kristaps.me/blog/swiftui-mapview</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Finding places, navigating our way, or simply checking what's around - these are essential things that smartphones can help with. This year Apple added maps functionality to the SwiftUI framework. Let's check out how we can use it and what are the current problems.</p><blockquote><p>I would like to point out that this covers Xcode 12 beta software and it can change in future releases.</p></blockquote><h2>Present the MapView</h2><p>To show MapView we need to use MapKit's structure <code>Map</code> that is specifically designed to use with SwiftUI. It is a view that displays an embedded map interface. We can use it to configure user-allowed interactions, show and track current location, and add annotations on the map.</p><p>It comes with several <a href="https://developer.apple.com/documentation/mapkit/map">initialize methods</a>. Let's see how to create a map specifying the map visible map region and add annotations.</p><p>The coordinate region defines the area that is visible on the map. It is a <code>Binding</code> that takes an <code>MKCoordinateRegion</code> object that is a combination of center coordinate and a coordinate span around it.</p><pre><code><span class="keyword">struct</span> MapView: <span class="type">View</span> {
  <span class="keyword">@State var</span> coordinateRegion = <span class="type">MKCoordinateRegion</span>(
    center: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">56.948889</span>, longitude: <span class="number">24.106389</span>),
    span: <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">0.2</span>, longitudeDelta: <span class="number">0.2</span>))
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Map</span>(coordinateRegion: $coordinateRegion)
      .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
  }
}
</code></pre><p>Now we have a map showing the capital city of Latvia - Riga. With this init method we can specify other things like interaction capabilities, showing user location, and more.</p><img src="https://kristaps.me/assets/img/swiftui-map/mapview.png" alt="SwiftUI Map view"/><h2>Add annotations on the map</h2><p>If we want to add annotation on the map we need to use a different initializer method that takes <code>MKCoordinateRegion</code>, identifiable collection of annotations and block that creates returns <code>MapAnnotationProtocol</code> protocol object.</p><p>Right now MapKit offers three simple annotation views:</p><ul><li><code>MapPin</code> - pin-shaped annotation</li><li><code>MapMarker</code> - balloon-shaped annotation</li><li><code>MapAnnoation</code> - custom view annoation</li></ul><p>The simplest way is to use the first two annotation types, in this blog post we're going to look into <code>MapMarker</code> annotation type. To <a href="https://developer.apple.com/documentation/mapkit/mapmarker/3601335-init">initalize</a> need to pass a coordinate and optional tint color.</p><pre><code><span class="type">MapMarker</span>(coordinate: place.<span class="property">coordinate</span>, tint: .<span class="dotAccess">green</span>)
</code></pre><p>By putting it all together, we can show couple of annoations on the map like this:</p><pre><code><span class="keyword">struct</span> MapViewWithAnnotations: <span class="type">View</span> {
  <span class="keyword">let</span> veganPlacesInRiga = [
    <span class="type">VeganFoodPlace</span>(name: <span class="string">"Kozy Eats"</span>, latitude: <span class="number">56.951924</span>, longitude: <span class="number">24.125584</span>),
    <span class="type">VeganFoodPlace</span>(name: <span class="string">"Green Pumpkin"</span>, latitude:  <span class="number">56.967520</span>, longitude: <span class="number">24.105760</span>),
    <span class="type">VeganFoodPlace</span>(name: <span class="string">"Terapija"</span>, latitude: <span class="number">56.9539906</span>, longitude: <span class="number">24.13649290000000</span>)
  ]
  
  <span class="keyword">@State var</span> coordinateRegion = <span class="type">MKCoordinateRegion</span>(
    center: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">56.948889</span>, longitude: <span class="number">24.106389</span>),
    span: <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">0.2</span>, longitudeDelta: <span class="number">0.2</span>))
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Map</span>(coordinateRegion: $coordinateRegion,
        annotationItems: veganPlacesInRiga) { place <span class="keyword">in</span>
      <span class="type">MapMarker</span>(coordinate: place.<span class="property">coordinate</span>, tint: .<span class="dotAccess">green</span>)
    }.<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">all</span>)
  }
}
</code></pre><p>Let's not forget those collection elements should conform to <code>Identifiable</code> - provide <code>ID</code> value. The easiest way is to just use the <code>UUID</code> like this:</p><pre><code><span class="keyword">struct</span> VeganFoodPlace: <span class="type">Identifiable</span> {
  <span class="keyword">var</span> id = <span class="type">UUID</span>()
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">let</span> latitude: <span class="type">Double</span>
  <span class="keyword">let</span> longitude: <span class="type">Double</span>
  
  <span class="keyword">var</span> coordinate: <span class="type">CLLocationCoordinate2D</span> {
    <span class="type">CLLocationCoordinate2D</span>(latitude: latitude, longitude: longitude)
  }
}
</code></pre><p>As we see that there is no way how to initialize an annotation with the title right now. For that, we need to use <code>MapAnnotation</code> that allows us to create custom map annotation.</p><h2>Current drawbacks</h2><p>Adding Map view with SwiftUI is a very straight forward task, but current implementation lacks some important components. Let's discuss some of the drawbacks.</p><p>Adding a callout view for map annotation is one of the most essential things that is lacking with the current implementation.</p><p>After clicking on an annotation and showing a callout usually, there is the navigation or a modal view is presented. With a custom <code>MapAnnoation</code> we can partially do it, but for sure it is not a great solution.</p><p>Right now you can add only add annotations on the map. There isn't support for polyline or other elements.<br>## TL;DR</p><p>Adding Map view with SwiftUI is simple. It comes with ways to add binding to the map region, specify annotation list, track user's location, and more. Sadly with current Xcode Beta 3, it lacks features like showing titles for annotations, callout view, and SwiftUI way of navigation. Let's hope Apple will add it in the future.</p><h2>Links</h2><ul><li><a href="Map official documentation">https://developer.apple.com/documentation/mapkit/map</a></li><li><a href="Hacking with Swift article">https://www.hackingwithswift.com/quick-start/swiftui/how-to-show-a-map-view</a></li><li><a href="SwiftUI Map view implementation">https://github.com/fassko/RigaVeganMap</a></li><li><a href="Using MapKit with SwiftUI">https://swiftwithmajid.com/2020/07/29/using-mapkit-with-swiftui/</a></li><li><a href="Adventures in SwiftUI 2's MapKit support">https://codakuma.com/swiftui-mapkit-fun/</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/embracing-dynamic-type</guid><title>Embracing the Dynamic Type</title><description>Every year the third Thursday of May is the Global Accessibility Awareness Day. This time I want to focus on Dynamic Type in our iOS, iPadOS, and macOS projects. By implementing font scaling we can improve lives for loads of people with disabilities and impairments.</description><link>https://kristaps.me/blog/embracing-dynamic-type</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Every year the third Thursday of May is the <a href="https://en.wikipedia.org/wiki/Global_Accessibility_Awareness_Day">Global Accessibility Awareness Day (GAAD)</a>. This time I want to focus on Dynamic Type in our iOS, iPadOS, and macOS projects. By implementing font scaling we can improve lives for loads of people with disabilities and impairments.</p><p><a href="https://twitter.com/browgrammer/status/1031630345551065089">More than 40%</a> of iOS users have changed the font size to non-default one. It isn’t just a bigger font size. Quite a large chunk of folks have set it to smaller just because more information fits on the screen.</p><p>We should take into account how users want to interact with the apps we build. Apple - a huge accessibility advocate has written in <a href="https://developer.apple.com/design/human-interface-guidelines/accessibility/overview/introduction/">Human Interface Guidelines</a> that we should use text styles that provide flexibility and adaptability by default.</p><h2>What is Dynamic Type</h2><p>Dynamic Type is a feature to help developers to trigger and change text size according to the user’s text settings. It has been available from iOS 7 and we should embrace it.</p><p>Users can change text size in Settings app &gt; General &gt; Accessibility &gt; Larger Text. By default text size slider is in the center.</p><img src="https://kristaps.me/assets/img/dynamic-type/ios-settings.jpeg" alt="iOS Text Size Settings"/><h2>How to support Dynamic Type</h2><p>The easiest way to support Dynamic Type in your apps is to use system provided text styles. By using this option we get Dynamic Type support without putting in any extra effort. For our disposal there are many text styles for titles, body, captions, and more.</p><p>Starting from iOS 11 we can implement scaling for custom fonts with UIFontMetrics. During this post, we won’t look into that.</p><p>Let’s see how we can use system text styles using UIKit and SwiftUI.</p><h3>UIKit</h3><p>With good old UIKit we can use Dynamic Text Styles either with Storyboard or programmatically. We will not start a battle on which one is better during this post. :)</p><h4>Storyboard</h4><p>In Storyboard let’s say we have a Label view. In Inspector pane we need to check the Dynamic Type checkbox.</p><img src="https://kristaps.me/assets/img/dynamic-type/dynamic-type-storyboard.png" alt="Dynamic Type in Storyboard"/><p>Once that is done then just change the font by selecting one of the provided Text Style.</p><img src="https://kristaps.me/assets/img/dynamic-type/dynamic-type-font.png" alt="Custom Font"/><img src="https://kristaps.me/assets/img/dynamic-type/dynamic-type-text-styles.png" alt="Text Style"/><h4>Programmatically</h4><p>If we wish to create the user interface from code we need to use <code>preferredFont(forTextStyle:)</code> and set <code>adjustsFontForContentSizeCategory</code> to true. It does the same that we saw with Storyboard approach.</p><pre><code>label.<span class="property">font</span> = <span class="type">UIFont</span>.<span class="call">preferredFont</span>(forTextStyle: .<span class="dotAccess">largeTitle</span>)
label.<span class="property">adjustsFontForContentSizeCategory</span> = <span class="keyword">true</span>
</code></pre><h3>SwiftUI</h3><p>SwiftUI supports font scaling out of the box for free. But once we want to set custom font we can use Dynamic Text System Style. For that, we need to use <code>.font</code> directive passing a text style.</p><pre><code><span class="keyword">struct</span> TextView: <span class="type">View</span> {
  <span class="keyword">let</span> text: <span class="type">String</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
      <span class="type">Text</span>(text)
        .<span class="call">font</span>(.<span class="dotAccess">headLine</span>)
    }
  }
}
</code></pre><h2>How to test Dynamic Type</h2><p>When developing apps we can test Dynamic Type support in two ways - changing font size using Environment Overrides or Accessibility inspector. Both options can give quick and rapid feedback.</p><img src="https://kristaps.me/assets/img/dynamic-type/xcode-environment-overrides.png" alt="Xcode Environment Overrides"/><p>When running our app either in Simulator or on the device we can change environment variables from Debug Menu. That allows quickly to change text size and more.</p><img src="https://kristaps.me/assets/img/dynamic-type/accessibility-inspector.png" alt="Accessibility Inspector"/><p>The second option is to use the Accessibility Inspector tool. This option is tailored to check how our apps support accessibility features and quickly enable, disable, or change each of them.<br>## TL;DR</p><p>Accessibility has been an important topic in last couple of WWDC and overall in technology. By making our apps and solutions accessible we help our current users and support new users who previously couldn’t use our apps.</p><p>Dynamic Type is an iOS feature that scales font according to the user settings. More than 40% of iOS users have changed the default system font size. Both larger and smaller.</p><p>The easiest way to support Dynamic Type is to use System Font Styles either from Storyboard or programmatically with UIKit. With SwiftUI font scaling comes out of the box, but sure enough we can use System Styles let’s say for titles and captions.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/uikit/uifont/scaling_fonts_automatically">Apple Human Interface Guidelines</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2017/245/">Building Apps with Dynamic Type - WWDC 2017</a></li><li><a href="https://blog.timroesner.com/supporting-dynamic-type">Supporting Dynamic Type with Custom Fonts on iOS</a></li><li><a href="https://fluffy.es/introduction-to-dynamic-type/">Introduction to supporting Dynamic Type</a></li><li><a href="https://pspdfkit.com/blog/2018/improving-dynamic-type-support/">Improving Dynamic Type Support</a></li><li><a href="https://swiftwithmajid.com/2019/10/09/dynamic-type-in-swiftui/">Dynamic Type in SwiftUI</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-dynamic-type-with-a-custom-font">How to use Dynamic Type with a custom font</a></li><li><a href="https://github.com/fassko/DynamicType">Dynamic Type project with UIKit and SwiftUI</a></li><li><a href="https://devchat.tv/iphreaks/ips-288-accessibility-dynamic-type-and-voiceover-with-jeff-watkins/">iPS 288: Accessibility, Dynamic Type, and Voiceover with Jeff Watkins</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/different-flavors-of-websockets-vapor</guid><title>Different flavors of WebSockets on Vapor with Swift</title><description>Swift on the server lately is getting more traction despite IBM leaving the club. One of the most popular frameworks out there is Vapor. It is built on top of Apple’s SwiftNIO and written fully in Swift programming language. This time we will look into how to work with WebSockets using Vapor framework. We are going to see how to create a client and server using Vapor’s module WebSocketKit and Vapor framework itself.</description><link>https://kristaps.me/blog/different-flavors-of-websockets-vapor</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Swift on the server lately is getting more traction despite <a href="https://forums.swift.org/t/december-12th-2019/31735">IBM leaving the club</a>. One of the most popular frameworks out there is <a href="https://vapor.codes/">Vapor</a>. It is built on top of Apple’s <a href="https://github.com/apple/swift-nio">SwiftNIO</a> and written fully in Swift programming language.</p><p>This time we will look into how to work with WebSockets using Vapor framework. We are going to see how to create a client and server using Vapor’s module <a href="https://github.com/vapor/websocket-kit">WebSocketKit</a> and Vapor framework itself.</p><h2>WebSocketKit</h2><p><a href="https://github.com/vapor/websocket-kit">WebSocketKit</a> is a WebSocket client library built on SwiftNIO. Vapor framework consists of many smaller modules and this is one of them. WebSocketKit is hiding away SwiftNIO lower-level complexity and nicely abstracting the event loops. Let’s see how can we use it.</p><h3>Client</h3><p>When creating a WebSocket client with WebSocketKit we need to follow a couple of steps. At first, we need to create an event loop group where we can receive the WebSocket events such as receiving a text.</p><pre><code><span class="keyword">var</span> eventLoopGroup = <span class="type">MultiThreadedEventLoopGroup</span>(numberOfThreads: <span class="number">2</span>)
</code></pre><p>After that, we should create a WebSocket promise within the created event loop group. Within the promise, we specify the WebSocket events. In this example, we are sending <code>hello</code> String value and printing out text that we receive back.</p><pre><code><span class="keyword">let</span> port: <span class="type">Int</span> = <span class="number">8080</span>
<span class="keyword">let</span> promise = eventLoopGroup.<span class="call">next</span>().<span class="call">makePromise</span>(of: <span class="type">String</span>.<span class="keyword">self</span>)
<span class="type">WebSocket</span>.<span class="call">connect</span>(to: <span class="string">"ws://localhost:</span>\(port)<span class="string">"</span>, on: eventLoopGroup) { ws <span class="keyword">in</span>
  ws.<span class="call">send</span>(<span class="string">"hello"</span>)
  ws.<span class="call">onText</span> { ws, string <span class="keyword">in</span>
    <span class="call">print</span>(string)
  }
}.<span class="call">cascadeFailure</span>(to: promise)
</code></pre><p>After that, we need to wait for executing events within this promise and event loop group.</p><pre><code><span class="keyword">_</span>  = <span class="keyword">try</span> promise.<span class="property">futureResult</span>.<span class="call">wait</span>()
</code></pre><h3>Server</h3><p>Creating a server with WebSocketKit is a bit more complicated - let’s move step by step.</p><p>Similarly, when creating the client we need to create the event loop group.</p><pre><code><span class="keyword">var</span> eventLoopGroup = <span class="type">MultiThreadedEventLoopGroup</span>(numberOfThreads: <span class="number">2</span>)
</code></pre><p>A <code>GET</code> connection can be transformed into WebSocket connection via upgrade dance. When using this approach, we need to configure that ourselves.</p><pre><code><span class="keyword">let</span> upgradePipelineHandler: (<span class="type">Channel</span>, <span class="type">HTTPRequestHead</span>) -&gt; <span class="type">EventLoopFuture</span>&lt;<span class="type">Void</span>&gt; = { channel, req <span class="keyword">in</span>
  <span class="type">WebSocket</span>.<span class="call">server</span>(on: channel) { ws <span class="keyword">in</span>
    ws.<span class="call">send</span>(<span class="string">"You have connected to WebSocket"</span>)
    
    ws.<span class="call">onText</span> { ws, string <span class="keyword">in</span>
      <span class="call">print</span>(<span class="string">"received"</span>)
      ws.<span class="call">send</span>(string.<span class="call">trimmingCharacters</span>(in: .<span class="dotAccess">whitespacesAndNewlines</span>).<span class="call">reversed</span>())
    }
    
    ws.<span class="call">onBinary</span> { ws, buffer <span class="keyword">in</span>
      <span class="call">print</span>(buffer)
    }
    
    ws.<span class="property">onClose</span>.<span class="call">whenSuccess</span> { value <span class="keyword">in</span>
      <span class="call">print</span>(<span class="string">"onClose"</span>)
    }
  }
}
</code></pre><p>Now as we have created the WebSocket upgrade pipeline let’s use it. To do that we need to create the promise in which we will receive the events.</p><pre><code><span class="keyword">let</span> promise = eventLoopGroup.<span class="call">next</span>().<span class="call">makePromise</span>(of: <span class="type">String</span>.<span class="keyword">self</span>)

<span class="keyword">let</span> server = <span class="keyword">try</span> <span class="type">ServerBootstrap</span>(group: eventLoopGroup).<span class="call">childChannelInitializer</span> { channel <span class="keyword">in
  let</span> webSocket = <span class="type">NIOWebSocketServerUpgrader</span>(
    shouldUpgrade: { channel, req <span class="keyword">in
      return</span> channel.<span class="property">eventLoop</span>.<span class="call">makeSucceededFuture</span>([:])
  },
    upgradePipelineHandler: upgradePipelineHandler
  )
  
  <span class="keyword">return</span> channel.<span class="property">pipeline</span>.<span class="call">configureHTTPServerPipeline</span>(
    withServerUpgrade: (
      upgraders: [webSocket],
      completionHandler: { ctx <span class="keyword">in</span>
        <span class="comment">// complete</span>
    })
  )
}.<span class="call">bind</span>(host: <span class="string">"localhost"</span>, port: port).<span class="call">wait</span>()
</code></pre><p>To boot up the server we need to start waiting for the events with the freshly created promise and server object.</p><pre><code><span class="keyword">_</span> = <span class="keyword">try</span> promise.<span class="property">futureResult</span>.<span class="call">wait</span>()
<span class="keyword">try</span> server.<span class="call">close</span>(mode: .<span class="dotAccess">all</span>).<span class="call">wait</span>()
</code></pre><p>Now we have a running server using WebSocketKit framework. When a client sends text message we are reversing all the characters. For example when a client sends <code>Hello</code> we are sending back <code>olleH</code>.</p><h2>Vapor app approach</h2><p>All this seems quite complicated, but don’t worry - by using Vapor app approach, all this complexity goes away.</p><h3>Client</h3><p>Creating a client is much easier within Vapor app. You just need to create a new WebSocket instance using an event loop group from <code>app</code> object. Then connect to the network address. Within a closure, you get WebSocket object on which you can register events you want to trigger.</p><pre><code><span class="keyword">let</span> url = <span class="string">"wss://echo.websocket.org"</span>
<span class="keyword">let</span> _ = <span class="type">WebSocket</span>.<span class="call">connect</span>(to: url, on: app.<span class="property">eventLoopGroup</span>) { ws <span class="keyword">in</span>
  ws.<span class="call">onText</span> { ws, text <span class="keyword">in</span>
    <span class="call">print</span>(text)
  }
  
  ws.<span class="call">send</span>(<span class="string">"Hello"</span>)
}
</code></pre><p>In this example, client sends <code>Hello</code> to the server once connected and prints out to the console any text that is received.</p><h3>Server</h3><p>When creating a server we need to provide an endpoint where clients can connect to. Then within a closure, we get WebSocket object and request object.</p><p>Similarly, like with the client, we can specify what we want to do when these events are triggered. For instance, once the server receives text it will reverse it and send back.</p><pre><code>app.<span class="call">webSocket</span>(<span class="string">""</span>) { request, ws <span class="keyword">in</span>
  ws.<span class="call">send</span>(<span class="string">"You have been connected to WebSockets"</span>)
  
  ws.<span class="call">onText</span> { ws, string <span class="keyword">in</span>
    ws.<span class="call">send</span>(string.<span class="call">trimmingCharacters</span>(in: .<span class="dotAccess">whitespacesAndNewlines</span>).<span class="call">reversed</span>())
  }
  
  ws.<span class="property">onClose</span>.<span class="call">whenComplete</span> { result <span class="keyword">in
    switch</span> result {
    <span class="keyword">case</span> .<span class="dotAccess">success</span>():
      <span class="call">print</span>(<span class="string">"Closed"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
      <span class="call">print</span>(<span class="string">"Failed to close connection</span> \(error)<span class="string">"</span>)
    }
  }
}
</code></pre><p>Additional to that we can can react once client disconnects and many <a href="http://api.vapor.codes/websocket/latest/WebSocket/Classes/WebSocket.html">more</a>.</p><h2>TL;DR</h2><p>Swift on the server has gained a lot of popularity especially now since iOS developers can create apps and backend services in the same language.</p><p>Most of the Swift server frameworks are built on top of SwiftNIO framework that gives a very granular way to configure WebSockets.</p><p>Using Vapor tools like WebSocketKit and app framework itself we can ease this complicated process. You can check out the <a href="https://github.com/fassko/vapor-websockets">code samples</a> and start using Swift when you need to deal with WebSockets on the backend.</p><h2>Links</h2><ul><li><a href="https://github.com/vapor/websocket-kit">WebSocketKit on Github</a></li><li><a href="http://api.vapor.codes/websocket/latest/WebSocket/index.html">WebSocketKit documentation</a></li><li><a href="https://github.com/fassko/vapor-websockets">Vapor 4.0 WebSockets documentation</a></li><li><a href="http://api.vapor.codes/websocket/latest/WebSocket/index.html">Vapor WebSockets code samples</a></li><li><a href="https://github.com/apple/swift-nio">SwiftNIO</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/nstimer-vs-cadisplaylink</guid><title>NSTimer vs CADisplayLink</title><description>`NSTimer` or just `Timer` in Swift world is a commonly used way to execute something repeatedly with an interval. For instance, a countdown timer is a perfect example. A hidden gem is `CADisplayLink` - a special flavor of timer that is linked to the device screen refresh rate. Usually, it is 60 frames per second, but in new iPads, it is 120 frames per second.</description><link>https://kristaps.me/blog/nstimer-vs-cadisplaylink</link><pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p><code>NSTimer</code> or just <code>Timer</code> in Swift world is a commonly used way to execute something repeatedly with an interval. For instance, a countdown timer is a perfect example.</p><p>A hidden gem is <code>CADisplayLink</code> - a special flavor of timer that is linked to the device screen refresh rate. Usually, it is 60 frames per second, but in new iPads, it is 120 frames per second.</p><h2>What is (NS)Timer?</h2><p>With <a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink">Timer</a> you can line up one or multiple tasks in the future. You can specify if the timer needs to repeat.</p><pre><code><span class="keyword">let</span> timer = <span class="type">Timer</span>.<span class="call">scheduledTimer</span>(withTimeInterval: <span class="number">1.0</span>, repeats: <span class="keyword">true</span>) { timer <span class="keyword">in</span>
  <span class="call">print</span>(<span class="string">"1 second passed"</span>)
}
</code></pre><p>In the example above timer will fire every 1 second indefinitely.</p><p>To stop the timer you need to invalidate it.</p><pre><code>timer.<span class="call">invalidate</span>()
</code></pre><p>Timers are fired on the main thread. If the app is UI heavy timers won’t fire. To fix that you can: - attach to non-default <code>RunLoop</code> mode like common mode - it will allow a timer to fire even UI (main thread) is busy</p><pre><code><span class="type">RunLoop</span>.<span class="property">current</span>.<span class="call">add</span>(timer, forMode: .<span class="dotAccess">common</span>)
</code></pre><p>OR - you can synchronize with your screen updates with <code>CADisplayLink</code>.</p><h2>What is CADisplayLink?</h2><p><code>CADisplayLink</code> is a special flavor of Timer that lets your apps run a piece of code every time right after the screen has refreshed. Usually, it is 60 frames per second, but in selective devices like new iPads, it is 120 frames per second.</p><p>It is a great way to create smooth animations and calculate the next frame. This way you have a perfect timing between the frames unlike the classical <code>Timer</code> which is not guaranteed to fire on the exact time when the screen is refreshing.</p><pre><code><span class="keyword">class</span> DisplayLink {
  <span class="keyword">@objc func</span> displayRefreshed(displayLink: <span class="type">CADisplayLink</span>) {
    <span class="call">print</span>(displayLink.<span class="property">timestamp</span>)
  }

<span class="keyword">init</span>() {
  <span class="keyword">let</span> displayLink = <span class="type">CADisplayLink</span>(target: <span class="keyword">self</span>, selector: <span class="keyword">#selector</span>(<span class="call">displayRefreshed</span>(displayLink:)))
    displayLink.<span class="call">add</span>(to: .<span class="dotAccess">main</span>, forMode: .<span class="dotAccess">default</span>)
  }
}
</code></pre><p>When you create a <code>DisplayLink</code> it should be linked to an object and specified an <code>objc</code> function as a selector. This function will be fired as soon as redraw on the screen happens. We can see it by printing out the timestamp.</p><pre><code class="language-no-highlight">  ...
  93095.013681187
  93095.11224511401
  93095.12891178101
  93095.145578448
  93095.162245115
  93095.178911782
  93095.19557844901
  93095.21224511601
  ...
</code></pre><p><code>CADisplayLink</code> has a property <code>preferredFramesPerSecond</code> that lets you specify a callback rate calculated in frames per second. It means you can specify your refresh rate when you want the timer to fire. It is a great way if you don’t need to execute your code every time screen refreshes.</p><h2>Timer vs CADisplayLink</h2><p><code>Timer</code> and <code>CADisplayLink</code> both are ways to fire piece of code with an interval. These two approaches are different.</p><p><code>Timer</code> is useful when you just want to execute something let’s say every 5 seconds without it being tied to screen redrawing.</p><p><code>CADisplayLink</code> is tied to screen refresh rate which is either 60 or 120 frames per second. It is fired right after screen redraws and you have maximum amount of time to execute the code before the next screen refresh. This approach shines if you need to create seamless animations or it can be useful in game development where you can’t avoid any screen refresh drops.</p><h2>TL;DR</h2><p>We all might know <code>NSTimer</code> (or just <code>Timer</code>) which is good for executing piece of code after an interval with or without repeating it.</p><p>In some cases it’s worth to consider <code>CADisplayLink</code> especially if you want to work with animations and get most of the time between screen redraws itself.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/nstimer?language=objc">NSTimer official documentation</a></li><li><a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink">CADisplayLink official documentation</a></li><li><a href="https://www.raywenderlich.com/113835-ios-timer-tutorial">Timer tutorial</a></li><li><a href="https://www.hackingwithswift.com/articles/117/the-ultimate-guide-to-timer">How to use Timer</a></li><li><a href="https://www.hackingwithswift.com/example-code/system/how-to-synchronize-code-to-drawing-using-cadisplaylink">How to use CADisplayLink</a></li><li><a href="https://medium.com/@dmitryivanov_54099/cadisplaylink-and-its-applications-bfafb760d738?source=linkShare-edb1354ca2c4-1583337923">In depth article about CADisplayLink</a></li><li><a href="https://stackoverflow.com/questions/30955847/ios-animation-cadisplaylink-vs-cashapelayer">Discussion about CADisplayLink and animations</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/clearing-subscriptions</guid><title>Clearing up after subscribing to Swift WebSockets</title><description>Opening and keeping a WebSocket connection alive isn't enough when dealing with it. The connection needs to be closed either from user or sever side. That is [mentioned](https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-6) in the official WebSocket protocol.</description><link>https://kristaps.me/blog/clearing-subscriptions</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Opening and keeping a WebSocket connection alive isn't enough when dealing with it. The connection needs to be closed either from user or sever side. That is <a href="https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-6">mentioned</a> in the official WebSocket protocol.</p><p>Previously we have seen how to implement WebSockets using <a href="https://kristaps.me/websockets-swift/">Starscream library</a>, <a href="https://kristaps.me/websockets-ios-13-swift/">URLSessionWebSocketTask</a> and <a href="https://kristaps.me/graphql-subscriptions/">GraphQL</a> in Swift projects. This time we will look into cleaning up the connection after you don’t need it anymore.</p><p>If you leave the connection open and don’t clean up properly various problems can arise: memory leaks, server overworking and data corruptions.</p><h2>Closing the WebSocket</h2><p>As we are looking at how to close connection from user agent there are couple of things to consider. When closing the connection we need to inform server about the reason using "close" code which can be useful for server developers. There are several "close" codes which you can check out in <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1">RFC 6455</a> specification or simplified version <a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent">here</a>.</p><p>If anything goes wrong with the connection on user side connection should be closed. It is important to note that when user agent notices that server has closed its connection, it should do the same on the other side. That means you need to explicitly inform the server about such event (regardless of the closure on the user side). That is clearly <a href="https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-6.3">stated</a> in the official WebSocket protocol.</p><h2>Cancel the URLSessionWebSocketTask</h2><p>To cancel a <code>URLSessionWebSocketTask</code> you need to call a <code>cancel</code> <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3181200-cancel">method</a>.</p><p>When calling this instance method you need to provide a <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/closecode">close code</a> and a reason.</p><pre><code><span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"wss://echo.websocket.org"</span>)!
<span class="keyword">let</span> webSocketTask = <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">webSocketTask</span>(with: url)

<span class="comment">// ...</span>

webSocketTask.<span class="call">cancel</span>(with: .<span class="dotAccess">goingAway</span>, reason: <span class="keyword">nil</span>)
</code></pre><h2>Disconnect with Starscream</h2><p>To close a WebSocket created with library <a href="https://github.com/daltoniam/Starscream">Starscream</a> you need to call a <code>disconnect</code> method. If you want to specify it in the close code you can do so, but it is optional.</p><pre><code><span class="keyword">let</span> socket = <span class="type">WebSocket</span>(url: <span class="type">URL</span>(string: <span class="string">"ws://localhost:8080/"</span>)!)

<span class="comment">// ...</span>

socket.<span class="call">disconnect</span>(closeCode: <span class="type">CloseCode</span>.<span class="property">normal</span>.<span class="property">rawValue</span>)
</code></pre><h2>Cancel subscriptions with GraphQL</h2><p>When using GraphQL with subscriptions Apollo protocol handles all the heavy duty work behind the scenes. Clients can get immediate data changes from the server.</p><p>In Apollo iOS SDK library subscriptions are <code>Cancellable</code> <a href="https://github.com/apollographql/apollo-ios/Sources/Apollo/Cancellable.swift">protocol</a> types. It is an object that can be cancelled when in progress and it has just one method <code>cancel</code>.</p><p>In order to clean up after GraphQL subscriptions are not needed anymore the easiest way is to keep track of all subscriptions and cancel when needed or do the cleanup within object <code>deinit</code> method.</p><pre><code><span class="keyword">var</span> subscriptions: [<span class="type">Cancellable</span>]

<span class="comment">// ...</span>

<span class="keyword">let</span> newPricesSubcriprion = <span class="type">ApolloClient</span>.<span class="call">subscribe</span>(<span class="type">NewPricesSubscription</span>()) { ... }

<span class="comment">// ...</span>

subscriptions.<span class="call">forEach</span> { subscription <span class="keyword">in</span>
    subscription.<span class="call">cancel</span>()
}
</code></pre><h2>TL;DR</h2><p>When working with WebSockets we need to remember to close connections and clean up. Forgetting to do so we can run into multiple issues which can later be hard to debug and understand.</p><p>We can use WebSockets in our Swift projects in multiple ways and each one requires a different approach to close the connection. But most importantly as WebSocket protocol tells us we need to do it either connection is closed from the user or server side.</p><h2>Links</h2><ul><li><a href="https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-6">Closing the connection from WebSocket protocol</a></li><li><a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3181200-cancel">Cancel URLSessionWebSocketTask</a></li><li><a href="https://github.com/daltoniam/Starscream">Starscream library documentation</a></li><li><a href="https://www.apollographql.com/docs/ios/subscriptions/">GraphQL subscriptions</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/ignorance-of-cache</guid><title>Ignorance of the URLRequest cache</title><description>Caching and invalidating cache is one of the hardest things in computer science [according to](https://martinfowler.com/bliki/TwoHardThings.html) Martin Fowler. Recently I was dealing with cache and invalidating it in three of my applications. I had some serious issues with that and wanted to dig deeper. This time we will discuss  `URLRequest` caching strategies and how to use it in your apps. I will share some of my learnings and problems that I found.</description><link>https://kristaps.me/blog/ignorance-of-cache</link><pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Caching and invalidating cache is one of the hardest things in computer science <a href="https://martinfowler.com/bliki/TwoHardThings.html">according to</a> Martin Fowler.</p><p>Recently I was dealing with cache and invalidating it in three of my applications. I had some serious issues with that and wanted to dig deeper. This time we will discuss <code>URLRequest</code> caching strategies and how to use it in your apps. I will share some of my learnings and problems that I found.</p><h2>Creating URLRequest with cache</h2><p>Not so many of us use caching strategy when creating <code>URLRequest</code> and hitting the network. If the server you’re accessing doesn’t have caching strategy implemented then making network requests can cause data corruption in your apps.</p><p>I had these issues with just a simple request and getting new <code>JSON</code> data from the network. For some reason, <code>URLRequest</code> thought that nothing has changed and returned data from internal app cache rather than the network.</p><p>The reason for this is that <code>NSURLCache</code> is set for the application by default according to the <a href="https://developer.apple.com/documentation/foundation/urlcache#//apple_ref/occ/clm/NSURLCache/setSharedURLCache:">documentation</a>. The cache will be purged when the device runs low on disk space, but mostly this isn’t the case. You can control <code>NSURLCache</code> behavior when launching the app but let’s leave that for another post.</p><h2>Caching strategies</h2><p><code>NSURLRequest</code> has a <a href="https://developer.apple.com/documentation/foundation/nsurlrequest/1407944-cachepolicy">property</a> <code>cachePolicy</code> which sets the caching strategy for the request you’re creating. It is an enum and has several <a href="https://developer.apple.com/documentation/foundation/nsurlrequest/cachepolicy">choices</a> defined as constants:</p><ul><li><code>case useProtocolCachePolicy</code> &gt; Use the caching logic defined in the protocol implementation, if any, for a particular URL load request.</li><li><code>case reloadIgnoringLocalCacheData</code> &gt; The URL load should be loaded only from the originating source.</li><li><code>case reloadIgnoringLocalAndRemoteCacheData</code> &gt; Ignore local cache data, and instruct proxies and other intermediates to disregard their caches so far as the protocol allows.</li><li><code>static var reloadIgnoringCacheData: NSURLRequest.CachePolicy</code> &gt; Replaced by NSURLRequest.CachePolicy.reloadIgnoringLocalCacheData</li><li><code>case returnCacheDataElseLoad</code> &gt; Use existing cache data, regardless of age or expiration date, loading from originating source only if there is no cached data.</li><li><code>case returnCacheDataDontLoad</code> &gt; Use existing cache data, regardless of age or expiration date, and fail if no cached data is available.</li><li><code>case reloadRevalidatingCacheData</code> &gt; Use cache data if the origin source can validate it; otherwise, load from the origin</li></ul><p>If you just read the documentation then all of these constants look confusing and hard to choose the right now. Let’s try to understand which of the caching policy you need to choose for your <code>URLRequest</code> and when.</p><h2>Which one to choose?</h2><p>The default policy for URL load requests is <code>useProtocolCachePolicy</code>. If a cached response does not exist then it is fetched from the originating source. Otherwise, if a response doesn’t tell to revalidate then a response is returned from the cache. For more detailed information you can go to <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13">RFC 2616 detailed documentation</a>. Here is an image to illustrate how this policy works.</p><img src="https://kristaps.me/assets/img/cache/cache-determination.png" alt="How useProtocolCachePolicy works"/><p>Option <code>reloadIgnoringLocalCacheData</code> ignores the local cache and <code>reloadIgnoringLocalAndRemoteCacheData</code> ignores local and remote cache.</p><p>With <code>returnCacheDataElseLoad</code> you tell to use cache no matter how out of date it is. If the cached request doesn’t exist it will be loaded from the network.</p><p>Option <code>returnCacheDataDontLoad</code> is the most confusion one. It means offline mode. Only cached data will be used and it won’t load from the network.</p><p>But the story doesn’t end here, if we check <code>reloadRevalidatingCacheData</code> <a href="https://developer.apple.com/documentation/foundation/nsurlrequest/cachepolicy/reloadrevalidatingcachedata">documentation</a> then we see that previous versions than macOS 15, iOS 13, watchOS 6, and tvOS 13 don’t implement this constant. <a href="https://twitter.com/mattt">Mattt</a> was <a href="https://nshipster.com/nsurlcache/">warning</a> us about that years ago. There is a <a href="http://openradar.appspot.com/radar?id=1755401">radar</a> opened in May 2012.</p><p>So which one to choose? There isn’t a right or wrong answer, but the rule of thumb is - if you want partial cache with default settings then choose <code>useProtocolCachePolicy</code>. If you want to load a request without cache then choose either <code>reloadIgnoringLocalCacheData</code> or <code>reloadIgnoringLocalAndRemoteCacheData</code>.</p><h2>TL;DR</h2><p>Handling cache and cache invalidation are one of the hardest topics in Computer Science. In iOS, macOS, tvOS and watchOS it isn’t easy and straight forward. The official documentation is confusing and isn’t clear how it works behind the scenes.</p><p><code>URLRequest</code> has a <a href="https://developer.apple.com/documentation/foundation/nsurlrequest/1407944-cachepolicy">property</a> <code>cachePolicy</code> which sets the caching strategy for the request.</p><p>For most of the cases default <code>useProtocolCachePolicy</code> option is what you want. If you want to avoid cache then one of <code>reloadIgnoringLocalCacheData</code> or <code>reloadIgnoringLocalAndRemoteCacheData</code> is the right one you have to choose.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/nsurlrequest/cachepolicy">URLRequest Cache Policy documentation</a></li><li><a href="https://nshipster.com/nsurlcache">Article about NSURLCache by NSHipster</a></li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13">Caching in HTTP</a></li><li><a href="https://www.fabernovel.com/en/engineering/how-to-leverage-http-cache-in-ios">How to leverage HTTP cache in iOS</a></li><li><a href="https://codewithchris.com/preventing-nsurlconnection-cache-issues/">Preventing NSURLConnection Cache Issues</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/graphql-advances-with-swift</guid><title>GraphQL Advances when fetching data in iOS with Swift and Apollo SDK</title><description>In previous articles, we discussed how to [get started](/graphql-ios-swift/) with  and use [subscriptions](/graphql-subscriptions/) with GraphQL in iOS (and iPadOS, tvOS, and macOS) using Swift programming language.</description><link>https://kristaps.me/blog/graphql-advances-with-swift</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In previous articles, we discussed how to <a href="https://kristaps.me/graphql-ios-swift/">get started</a> with and use <a href="https://kristaps.me/graphql-subscriptions/">subscriptions</a> with GraphQL in iOS (and iPadOS, tvOS, and macOS) using Swift programming language.</p><p>This time I want to discuss some advanced topics using GraphQL with Apollo SDK and Swift: usage of GraphQL fragments and Swift scalar types; optionality with GraphQL and it’s pros and cons.</p><h2>Using fragments</h2><p>At first, what is a <strong>fragment</strong> in GraphQL? It is a reusable piece of the query. For instance, if you need the same field in multiple queries you can extract that into a reusable piece called <a href="https://graphql.org/learn/queries/#fragments">GraphQL fragment</a>.</p><pre><code class="language-no-highlight">query Users($id: userID) {
  users(id $id) {
    ...UserDetails
    followers {
      ...UserDetails
    }
  }
}

fragment UserDetails on User {
  id
  firstName
  lastName
  email
}
</code></pre><p>When you use fragments in your Swift project queries, Apollo iOS SDK <a href="https://www.apollographql.com/docs/ios/fragments/">generates separate result types</a>. It is a good way to divide UI, for instance, UITableViewCell or UICollectionViewCell. This way a child view can be reused and only depends on the parent - UITableView or UICollectionView.</p><h2>GraphQL scalar types in Swift</h2><p>In GraphQL a <a href="https://graphql.org/learn/schema/#scalar-types">scalar type</a> is a field that has to resolve to some concrete type. In Swift language it can be <code>Date</code> or <code>enum</code>. Once you download schema JSON file you can see it like this:</p><pre><code class="language-no-highlight">"type": {
  "kind": "SCALAR",
  "name": "Date",
  "ofType": null
}
</code></pre><p>Using Apollo code generation argument <code>--passthroughCustomScalars</code> you can use your own types for custom scalars.</p><p>Swift <code>Date</code> type from Foundation framework is a good example. If you want to convert GraphQL Date type to Swift using Apollo iOS SDK, just pass <code>--passthroughCustomScalars</code> when generating the Swift code.</p><p>You can use custom formats for <code>Date</code> like <code>ISO8601</code> or use milliseconds. You just need to extend <code>Date</code> type and conform to <code>JSONDecodable</code> which requires implementing the initializing method.</p><pre><code><span class="keyword">extension</span> <span class="type">Date</span>: <span class="type">JSONDecodable</span> {
  <span class="keyword">public init</span>(jsonValue value: <span class="type">JSONValue</span>) <span class="keyword">throws</span> {
    <span class="keyword">guard let</span> isoString = value <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> {
      <span class="keyword">throw</span> <span class="type">JSONDecodingError</span>.<span class="call">couldNotConvert</span>(value: value, to: <span class="type">Date</span>.<span class="keyword">self</span>)
    }
    
    <span class="keyword">var</span> tmpDate: <span class="type">Date</span>?
    <span class="keyword">if</span> isoString.<span class="property">count</span> == <span class="number">17</span> {
      tmpDate = <span class="type">DateFormatter</span>.<span class="type">ISO8601short</span>.<span class="call">date</span>(from: isoString)
    } <span class="keyword">else if</span> isoString.<span class="property">count</span> == <span class="number">24</span> {
      tmpDate = <span class="type">DateFormatter</span>.<span class="type">ISO8601Milliseconds</span>.<span class="call">date</span>(from: isoString)
    } <span class="keyword">else</span> {
      tmpDate = <span class="type">DateFormatter</span>.<span class="type">ISO8601</span>.<span class="call">date</span>(from: isoString)
    }
    
    <span class="keyword">guard let</span> date = tmpDate <span class="keyword">else</span> {
      <span class="keyword">throw</span> <span class="type">JSONDecodingError</span>.<span class="call">couldNotConvert</span>(value: value, to: <span class="type">Date</span>.<span class="keyword">self</span>)
    }
    <span class="keyword">self</span> = date
  }
}
</code></pre><p><code>ISO8601short</code>, <code>ISO8601Milliseconds</code> and <code>ISO8601</code> declared in DateFormatter type extension as static instance properties.</p><h2>Dealing with optionals with GraphQL</h2><p>I think that optional type properties is one of the biggest downsides of the GraphQL with Apollo iOS SDK. It is so because in many cases GraphQL type field can not be specified, so it can be null.</p><p>When you are <a href="https://www.apollographql.com/docs/ios/fetching-queries/">fetching queries</a> with Apollo iOS SDK <code>GraphQLResult</code> type has optional property <code>data</code>. This property is a typed result data which means it has fetched type properties and those can be also optional.</p><p>This optional hell can be solved using extension for a specific type and add optional initializer:</p><pre><code><span class="keyword">extension</span> <span class="type">User</span> {  
  <span class="keyword">init</span>?(<span class="keyword">_</span> user: <span class="type">UsersQuery</span>.<span class="type">Data</span>.<span class="type">User</span>) {
    <span class="keyword">guard let</span> userID = <span class="type">Int</span>(user.<span class="property">id</span>) <span class="keyword">else</span> {
      <span class="keyword">return nil</span>
    }
    
    <span class="keyword">self</span>.<span class="property">id</span> = userID
    <span class="keyword">self</span>.<span class="property">firstName</span> = user.<span class="property">firstName</span>
    <span class="keyword">self</span>.<span class="property">lastName</span> = user.<span class="property">lastName</span>
    <span class="keyword">self</span>.<span class="property">email</span> = user.<span class="property">email</span>
  }
}
</code></pre><p>You can use this initializer when you fetch data and transform it from GraphQL types to your app models. By abstracting this with another layer you can hide it away and return, let’s say, a Swift Result type.</p><h2>TL;DR</h2><p>GraphQL fragments is a great way to extract some parts of the query code and reuse it in multiple places. Using Apollo iOS SDK it will generate Swift code for your apps and projects.</p><p>Converting types like GraphQL <code>Date</code> to Swift <code>Date</code> is a great hidden gem in Apollo iOS SDK. All you need to do is to add argument <code>--passthroughCustomScalars</code> during code generation.</p><p>Dealing with optionals can be a pain with GraphQL in your Swift projects. One way to improve the code base is to use custom initializers for your models.</p><h2>Links</h2><ul><li><a href="https://www.apollographql.com/docs/ios/fragments/">Using GraphQL fragments</a></li><li><a href="https://github.com/apollographql/apollo-tooling">Tooling for development and production Apollo workflows</a></li><li><a href="https://www.apollographql.com/docs/ios/fetching-queries/">Fetching queries</a></li><li><a href="https://blog.apollographql.com/mapping-graphql-types-to-swift-aa85e5693db4">Mapping GraphQL types to Swift</a></li><li><a href="https://github.com/apollographql/apollo-ios/issues/450">Add support for Date Type in Apollo iOS SDK</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/graphql-subscriptions</guid><title>How to use subscriptions with GraphQL using Apollo iOS SDK and Swift</title><description>GraphQL main functionality is to fetch and update data from the server. In addition to that subscriptions allow us to listen and to send messages from and to server in real-time. It is similar to regular queries, but the answer will be received when an event happens either on the server or on the client. Apollo iOS SDK library supports subscriptions and it is powered by the Swift WebSocket library [Starscream](/websockets-swift/) behind the scenes to connect to the server. Let's look at how to set it up and start using it.</description><link>https://kristaps.me/blog/graphql-subscriptions</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>GraphQL main functionality is to fetch and update data from the server. In addition to that subscriptions allow us to listen and to send messages from and to server in real-time. It is similar to regular queries, but the answer will be received when an event happens either on the server or on the client.</p><p>Apollo iOS SDK library supports subscriptions and it is powered by the Swift WebSocket library <a href="https://kristaps.me/websockets-swift/">Starscream</a> behind the scenes to connect to the server. Let's look at how to set it up and start using it.</p><h2>Schema and code generation</h2><p>Subscriptions are already supported once you download your schema file from the GraphQL server and perform the code generation. It will generate all the subscriptions using <code>GraphQLSubscription</code> protocol which allows passing parameters to subscription you want to implement.</p><p>Let’s imagine we have a chat application and GraphQL server can get messages for a specific thread as soon as they are sent. We need to create a GraphQL query in our <code>.graphql</code> file like this:</p><pre><code>subscription <span class="call">messagesReceived</span>($threadID: <span class="type">ID</span>!) {
  <span class="call">messagesReceived</span>(threadID: $threadID) {
    id
    date
    text
    author
  }
}
</code></pre><p>Once this is done we use Apollo iOS SDK to auto-generate type-safe Swift code. Which can be used in our app.</p><p>You can read more about using Apollo iOS SDK in my previous <a href="https://kristaps.me/graphql-ios-swift/">post</a>.</p><h2>Setting up the client</h2><p>Setting up the Apollo client using subscriptions can be the trickiest step, so let's go through it.</p><p>First, we need to create <code>WebSocketTransport</code> instance to send GraphQL subscription operations to the server.</p><pre><code><span class="keyword">let</span> webSocketTransport: <span class="type">WebSocketTransport</span> = {
  <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"ws://messaging.app/websocket"</span>)!
  <span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: url)
  <span class="keyword">return</span> <span class="type">WebSocketTransport</span>(request: request)
}()
</code></pre><p>Then an HTTP transport instance will help us to use queries and mutations.</p><pre><code><span class="keyword">let</span> httpTransport = <span class="type">HTTPNetworkTransport</span>(url: <span class="type">URL</span>(string: <span class="string">"http://messaging.app/graphql"</span>)!)
</code></pre><p>A split network transport allows the use of HTTP Transport and WebSocket transport protocols. That enables us to avoid any potential issues of having multiple client objects.</p><pre><code><span class="keyword">let</span> splitNetworkTransport = <span class="type">SplitNetworkTransport</span>(
  httpNetworkTransport: httpTransport, 
  webSocketNetworkTransport: webSocketTransport
)
</code></pre><p>Then we create the Apollo client using network transport type which in this case is <code>SplitNetworkTransport</code>.</p><pre><code><span class="keyword">let</span> apolloClient = <span class="type">Apollo</span>(networkTransport: splitTransport)
</code></pre><h2>Using the subscription</h2><p>After we have created the Apollo client with subscription capabilities we can use it in our app to listen when a new message has been created to the specific thread.</p><pre><code><span class="keyword">let</span> receivedMessagesSubscription = <span class="type">MessagesReceivedSubscription</span>(id: threadID)
<span class="keyword">let</span> messagesSubsription = apolloClient.<span class="call">subscribe</span>(subscription: receivedMessagesSubscription) {[<span class="keyword">weak self</span>] result <span class="keyword">in
  switch</span> result {
  <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> graphQLResult):
      <span class="keyword">if let</span> message = graphQLResult.<span class="property">data</span>.<span class="property">message</span> {
        <span class="call">print</span>(<span class="string">"Message received</span> \(message)<span class="string">"</span>)			
      }
  <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
      <span class="call">print</span>(<span class="string">"Failed to subscribe</span> \(error)<span class="string">"</span>)
  }
}
</code></pre><p>Each time when a message has been sent, code inside closure is executed with new data.</p><h2>TL;DR</h2><p>GraphQL is not only for fetching data from the server and updating data on the server. You can be using GraphQL subscription feature to listen and send real-time messages using WebSockets.</p><p>Apollo iOS SDK library has the functionality to support subscriptions in your Swift applications. It is using WebSocket library Starscream behind the scenes to offload this cumbersome task. By leveraging code generation you can use strictly typed Swift code to interact with your GraphQL server in real-time in your iOS, iPadOS, macOS and tvOS apps.</p><h2>Links</h2><ul><li><a href="https://www.apollographql.com/docs/ios/subscriptions/">Apollo iOS SDK library subscriptions documentation</a></li><li><a href="https://stackoverflow.com/questions/51720378/how-to-implement-graphql-subscription-using-apollo-ios-client">Some use cases setting up Apollo iOS SDK</a></li><li><a href="https://www.apollographql.com/docs/react/data/subscriptions/">Apollo SDK official subscriptions documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/apple-passkit</guid><title>What is PassKit and how to use it?</title><description>Apple [PassKit](https://developer.apple.com/documentation/passkit) framework is responsible for Apple Pay and managing user passes in Wallet app. This time let’s talk about passes, how to create and distribute them. Wallet app allows iOS users to organize boarding passes, tickets or gifts, business and loyalty cards. In short, passes are digital representations of information that usually is printed on paper or used as plastic cards.</description><link>https://kristaps.me/blog/apple-passkit</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Apple <a href="https://developer.apple.com/documentation/passkit">PassKit</a> framework is responsible for Apple Pay and managing user passes in Wallet app.</p><p>This time let’s talk about passes, how to create and distribute them. Wallet app allows iOS users to organize boarding passes, tickets or gifts, business and loyalty cards. In short, passes are digital representations of information that usually is printed on paper or used as plastic cards.</p><h2>Pass building blocks</h2><p>Passes are created as packages (or bundles) with extension <code>.pass</code> and consists of:</p><ul><li><code>pass.json</code> - file that defines the pass, image assets, and other metadata;</li><li><code>manifest.json</code> - file that describes files inside the pass and has SHA1 checksums of each of the files</li><li>image assets<ul><li>background of the pass</li><li>logo - the logo in the pass header</li><li>icon - small icon for the pass</li><li>strip - image strip background behind the primary fields</li></ul></li></ul><img src="https://kristaps.me/assets/img/passkit/pass-in-wallet-app.jpg" alt="Pass in Wallet app"/><h3>Required fields creating a pass</h3><p>When creating a pass you need to provide the <a href="https://developer.apple.com/documentation/passkit/pkpass/1618783-passtypeidentifier">pass type identifier</a> and <a href="https://developer.apple.com/documentation/passkit/pkpass/1618788-serialnumber">serial number</a>. Type identifier is a String value using reverse DNS style - for example, <code>pass.com.example.loyalty-card</code>. Serial number is a string value that has a unique value in the scope of the pass type, like a membership number or a ticket identifier.</p><p>Other mandatory fields are:</p><ul><li>format version - file format version, usually need to use 1 (number)</li><li>team identifier - unique 10-character identifier provided by Apple which you can find out from developer.apple.com portal</li><li>organization name - displayed on the lock screen</li><li>description - helps to make the pass accessible by VoiceOver</li></ul><h3>Different flavors of the pass</h3><p>Passes can have different visual appearance:</p><ul><li><code>boardingPass</code> - pass for a flight, train, bus or any other type of transit</li><li><code>coupon</code> - coupons, special offers or discounts</li><li><code>eventTicket</code> - pass to enter any kind of event</li><li><code>storeCard</code> - loyalty card style</li><li><code>generic</code> - style appropriate for any pass</li></ul><p>Wallet app is using different layout to each of these styles. It is much easier for your users to distinguish passes and find the right one faster.</p><h2>Creating passes</h2><p>Creating a pass is the first step of the pass lifecycle. It happens on the server side and should be cryptographically signed and compressed. Signing process requires several steps and Apple has a <a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/Creating.html#//apple_ref/doc/uid/TP40012195-CH4-SW1">manual</a> or you can use a third party library and provide necessary certificates. By signing your passes your users can be sure that the pass is correct and not fake.</p><p>When you debug passes in iOS Simulator Wallet app you can see any errors in the system log which you can view in Console app.</p><h2>Distributing passes</h2><p>After creating, signing and compressing a pass into a bundle you can distribute it in several ways:</p><ul><li>sending with an email;</li><li>using file sharing options like iCloud or AirDrop;</li><li>using Add to Wallet button <a href="https://developer.apple.com/documentation/passkit/pkaddpassbutton">provided</a> by Apple.</li></ul><h2>Using passes</h2><p>Now you can provide not only barcode information but NFC data as well. When using NFC your users can simply hold the authorized device near the NFC reader and authorize the pass regardless - whether it's a flight boarding, student ID, gym membership or even a ticket for the <a href="https://kristaps.me/wwdc-2019/">WWDC</a>.</p><img src="https://kristaps.me/assets/img/passkit/scanning-pass-apple-watch.jpg" alt="Using pass from Apple Watch"/><h2>TL;DR</h2><p>Apple PassKit framework helps to create, distribute and manage passes that usually are printed on paper or plastic.</p><p>It is a secure way to provide a more modern way to your users using Wallet app on their iPhones or Apple Watches.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/passkit">PassKit documentation</a></li><li><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/index.html#//apple_ref/doc/uid/TP40012195-CH1-SW1">Archived Wallet Developer Guide</a></li><li><a href="https://developer.apple.com/design/human-interface-guidelines/wallet/overview/pass-design/">Wallet Human Interface Guidelines</a></li><li><a href="https://www.youtube.com/watch?v=g5KRJgO7yJE">Video how to create passes</a></li><li>Outdated but still relevant tutorial, <a href="https://www.raywenderlich.com/2855-beginning-passbook-in-ios-6-part-1-2">Part 1</a> and <a href="https://www.raywenderlich.com/2853-beginning-passbook-in-ios-6-part-2-2">Part 2</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/dark-side-appstore</guid><title>Dark Side of the App Store</title><description>I am an Apple fanboy and I admit that. But one of the most frustrating things in being an app developer is dealing with the App Store review and compliance teams. This time I would like to share my experience with these problems.</description><link>https://kristaps.me/blog/dark-side-appstore</link><pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>I am an Apple fanboy and I admit that. But one of the most frustrating things in being an app developer is dealing with the App Store review and compliance teams. This time I would like to share my experience with these problems.</p><p>Even Apple’s former app approval chief has <a href="https://www.theverge.com/2019/5/29/18643868/apple-app-store-approval-process-antitrust-phillip-shoemaker-interview">said</a> that he is ‘really worried’ about company’s anticompetitive behavior.</p><h2>App Store review rejections</h2><p>Quite recently I jumped on a project which promotes vegan food places in Latvia. All these food spots are validated by the project manager and have to have at least three proper vegan meal options. I thought it would be a great idea to make an app for that, because on the go it is always easier to use it from your phone. <a href="https://apps.apple.com/lv/app/augi-draugi/id1475145259">App</a> adds extra features like navigation, searchable list and more features that are not available on the <a href="https://augidraugi.lv/">website</a>.</p><p>So far this app has been released with 5 version updates each time adding extra features to it. People love and use it a lot. Even data shows that app retention, ratings and feedback from social media is very good.</p><img src="https://kristaps.me/assets/img/dark-side-appstore/rejected-app-appstoreconnect.png" alt="Reject app"/><p>But sadly Apple App Store review team thinks differently. They have rejected last update due to <em>minimum functionality</em>. I had a call with Apple representative and they even explained that approving this app has been a mistake by them.</p><blockquote><p><strong><a href="https://developer.apple.com/app-store/review/guidelines/#4.2">Guideline 4.2 - Design - Minimum Functionality</a></strong> We found that the usefulness of your app is limited by the minimal amount of content or features it includes.</p></blockquote><p>App is free and it does not include any adds. It uses only iOS standard UI elements. App Store has plenty of scams and very bad apps so treating an app which complies to all user interface guidelines, supports new iOS 13 and is widely used is not understandable to me. Not to mention that this project tries to solve environmental and animal rights issues which is a big topic right now.</p><h2>App Store Scams</h2><img src="https://kristaps.me/assets/img/dark-side-appstore/copycat-search.png" alt="Copycat"/><p>For quite a while I have been working on a <a href="https://apps.apple.com/lv/app/dodies-lv/id1080800199">project</a> which lists hiking paths in the Baltic states. Most of them have been reviewed by the project team and have great pictures. App has been opensourced in <a href="https://github.com/fassko/Dodies.lv">Github</a> and everyone can participate to it. Recently I found that someone has copied this whole app and released it in App Store with the same name. I understand it is public in Github, but how could App Store team let it go trough the review process?</p><img src="https://kristaps.me/assets/img/dark-side-appstore/copycat.png" alt="Copycat"/><p>I filed a complaint on August 12 - it has been more than a month now. There was an email conversation, but Apple can’t reach out to this copycat or take that app down. It is such an obvious copycat that even my screenshots have been copied.</p><h2>App Store Payments and Revenue Cut</h2><p>In my own company <a href="https://www.qminder.com/">Qminder</a> I have had numerous issues with App Store review team about app revenue sharing. In short, our clients pay subscription fee for accessing the system. They can opt in to use iOS apps, but it is not mandatory at all.</p><p>App Store guidelines state that if you process any payments trough App Store you need to use Apple’s provided payment system and you get only 70%. Rest 30% goes to Apple supporting publishing apps, processing payment cards and more. That is completely understandable, but what if customers don’t use apps from App Store right now and opt in future? Or use the app now and stop using after a while?</p><p>I have been talking with App Store review team a few times: the solution is to not have any marks of registration or links in your apps. Otherwise you lose 30% of your revenue since you have the same pricing on the App Store and outside of it. There have been <a href="https://www.theverge.com/2018/12/28/18159373/netflix-in-app-subscriptions-iphone-ipad-ios-apple">news</a> that because of this issue Netflix has stopped to process new sign ups via App Store. Amazon only has a sign-in form in their apps without any information how to sign up and are now introducing <a href="https://twitter.com/stevemoser/status/1174408011965747201">credits system</a>. The list goes on and on.</p><p>Apple is trying to <a href="https://www.theverge.com/2019/5/29/18644045/apple-defends-app-store-policies-antitrust-eu-spotify">defend themselves</a> by creating a new page about <a href="https://www.apple.com/ios/app-store/principles-practices/">App Store principles and practices</a>. Some people like how they speak openly, but others pointed that they have failed to address any of real issues what developers are facing.</p><h2>TL;DR;</h2><p>App Store review process is one of the most painful parts of iOS development. It is done by real humans and that means it can be inconsistent and error prone.</p><p>Another part where App Store team at Apple isn’t supportive to the developers is revenue sharing. 30% of all payments processed trough App Store go to Apple supporting the app publishing and processing payments. It is a huge percentage especially if your service can be used without apps.</p><p>On the good note app review process has been improved in recent years, but there is still a long way to go to make it smooth, consistent and fair for everyone.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/graphql-ios-swift</guid><title>Using GraphQL in iOS with Swift</title><description>GraphQL is an alternative to the commonly used REST API approach. When using [GraphQL](https://graphql.org/) you only get one single endpoint to the server and through that endpoint you need to specify the exact data you need. It was created by Facebook in 2012 and open-sourced in 2015.</description><link>https://kristaps.me/blog/graphql-ios-swift</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>GraphQL is an alternative to the commonly used REST API approach. When using <a href="https://graphql.org/">GraphQL</a> you only get one single endpoint to the server and through that endpoint you need to specify the exact data you need. It was created by Facebook in 2012 and open-sourced in 2015.</p><p>Using GraphQL in your Swift applications is not that hard. The easiest way is to use <a href="https://github.com/apollographql/apollo-ios">Apollo iOS</a> client which recently has seen a lot of great improvements and bug fixes. Apollo iOS is a strongly-typed, caching GraphQL client for iOS, macOS, iPadOS, watchOS, and tvOS. It is written in Swift programming language.</p><h2>GraphQL vs REST</h2><p>REST API exposes one endpoint for each specific type of information. For example:</p><ul><li><code>/visitors</code> - list of all visitors</li></ul><ul><li><code>/visitors/ID/</code> - concrete visitor details with ID</li></ul><p>Imagine you would like to get a visitor by his name. At first, you need to get the visitors list and search by name. Once you find specific visitor ID you can get the rest of the visitor details from another endpoint.</p><p>Using GraphQL you could do this with just one request to the server. You just need to specify what kind of data would you like to get in declarative GraphQL syntax:</p><pre><code>{
  <span class="call">allVisitors</span>(name: <span class="string">"John Appleseed"</span>) {
    id
    name
    reasonOfVisit
    isServed
    signInTime
    feeedback
    ...
  } 
}
</code></pre><p>This is just one simple example. In reality, you could get multiple levels of data with just one call to the server.</p><h2>Setting up GraphQL using Swift in iOS</h2><p>You can use GraphQL in your iOS, iPadOS, macOS, watchOS and tvOS apps. The easiest way is to use <a href="https://github.com/apollographql/apollo-ios">Apollo iOS SDK</a> which is a strongly-typed, caching GraphQL client. It is written in Swift programming language.</p><h3>Installation</h3><p>To set up Apollo client you need to <a href="https://www.apollographql.com/docs/ios/installation/#installing-the-apollo-framework">install Apollo framework</a> and <a href="https://www.apollographql.com/docs/ios/installation/#adding-a-schema-file-to-your-target-directory">generate schema file</a> which describes how you can get information from the server and add to your Xcode app target.</p><p>Then you <a href="https://www.apollographql.com/docs/ios/installation/#creating-graphql-files-with-your-queries-or-mutations">can create</a> <code>.graphql</code> files with your queries or mutations on how you would like to get or change data from the server. After that, you need to add <a href="https://www.apollographql.com/docs/ios/installation/#adding-a-code-generation-build-step">code generation</a> build step in Xcode build process to generate type-safe Swift code to use for communication with your server.</p><p>Build your Xcode app target and <a href="https://www.apollographql.com/docs/ios/installation/#adding-the-generated-api-file-to-your-target">add generated</a> API file to use it.</p><h3>Communicate with the server</h3><p>Once the installation process is done you can set up <code>ApolloClient</code> instance and point to your GraphQL server.</p><pre><code><span class="keyword">import</span> Apollo

<span class="keyword">let</span> graphQLClient = <span class="type">ApolloClient</span>(url: <span class="type">URL</span>(string: <span class="string">"http://localhost:8080/graphql"</span>)!)
</code></pre><p>Then you can use <code>graphQLClient</code> to fetch data and process query results.</p><pre><code><span class="keyword">let</span> allVisitorsQuery = <span class="type">AllVisitorsQuery</span>(name: <span class="string">"John"</span>)

graphQLClient.<span class="call">fetch</span>(query: allVisitorsQuery) { result <span class="keyword">in
  switch</span> result {
  <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
    <span class="call">print</span>(<span class="string">"Something bad happened</span> \(error)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> graphQLResult):
    <span class="keyword">guard let</span> john = graphQLResult.<span class="property">data</span>?.<span class="property">visitor</span> <span class="keyword">else</span> {
      <span class="keyword">return</span>
    }
    
    <span class="call">print</span>(john)  
}
</code></pre><p>This is just a simple example in some of the next posts we will look into how we can mutate data and even use Websockets subscriptions.</p><h2>GraphQL pros and cons</h2><p>Every technology has its pros and cons. You need to understand if the tradeoffs are worth switching away from regular REST API.</p><h3>Pros</h3><p>GraphQL makes it faster to implement, change and maintain your applications. You don’t need to communicate every smaller detail with your backend or even create new endpoints.</p><p>Using Apollo iOS framework helps a lot to use GraphQL in your Swift applications. It does support iOS, iPadOS, watchOS, macOS and tvOS. You can use Swift type safety and other great features like Result type and more.</p><p>Lately, Apollo iOS framework has seen a lot of great updates and more bugs are being fixed. More and more companies switch to use GraphQL not only in web, but their mobile applications too.</p><h3>Cons</h3><p>Using GraphQL is not that straight forward especially if you are used to REST API approach. Switching your thinking and adapting a new way can take some time. It also adds an extra layer between server and your apps which you need to maintain in the future.</p><p>With Apollo iOS SDK you need to be very careful with <a href="https://www.apollographql.com/docs/ios/watching-queries/">caching</a>. There are several ways to deal with cache and when to not cache at all. Just to be sure to check out official documentation before or if you run into any data inconsistency issues.</p><p>Apollo helps a lot to use GraphQL with Swift, but one downside is optionals. If you have the freedom to tell what kind of data you want from the server that comes with optionality tradeoff. It is a minor issue, just you need to deal with that when you construct your models and get data back from the server.</p><h2>TL;DR</h2><p>GraphQL is a modern way to communicate with your server. It can replace commonly used REST API approach. With GraphQL you communicate with the backend via just one endpoint using declarative syntax.</p><p>Using GraphQL in your Swift applications for iOS, iPadOS, watchOS, macOS and tvOS is easy using Apollo framework. It is officially supported by GraphQL community and lately, it has been well maintained and supported.</p><h2>Links</h2><ul><li>Official iOS GraphQL <a href="https://www.apollographql.com/docs/ios/">documentation</a> and <a href="https://github.com/apollographql/apollo-ios">repository</a></li><li><a href="https://troubled.pro/2019/02/graphql.html">Blog post</a></li><li>Series of articles by Big Nerd Ranch. <a href="https://www.bignerdranch.com/blog/using-graphql-in-production-ios-applications-part-1/">Part 1</a>, <a href="https://www.bignerdranch.com/blog/using-graphql-in-production-ios-applications-part-2/">Part 2</a> and <a href="https://www.bignerdranch.com/blog/using-graphql-in-production-ios-applications-part-3/">Part 3</a></li><li>CocoaHeads Stockholm <a href="https://www.youtube.com/watch?v=ArMgdV-VwJ8">presentation</a></li><li>Swift Summit <a href="https://www.skilled.io/u/swiftsummit/interfacing-with-graphql-in-swift">presentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/websockets-ios-13-swift</guid><title>Websockets in iOS 13 using Swift and Xcode 11</title><description>Websockets in iOS 13, macOS 10.15, tvOS 13, watchOS 6 and Mac Catalyst have gained first-class citizen status in networking stack. Apple has finally added support in [URLSession](https://developer.apple.com/documentation/foundation/urlsessionwebsockettask) and for lower level in [Network.framework](https://developer.apple.com/documentation/network/nwprotocolwebsocket) for their platforms. This time we will focus on implementing Websockets using URLSession capabilities.</description><link>https://kristaps.me/blog/websockets-ios-13-swift</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Websockets in iOS 13, macOS 10.15, tvOS 13, watchOS 6 and Mac Catalyst have gained first-class citizen status in networking stack. Apple has finally added support in <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask">URLSession</a> and for lower level in <a href="https://developer.apple.com/documentation/network/nwprotocolwebsocket">Network.framework</a> for their platforms.</p><p>This time we will focus on implementing Websockets using URLSession capabilities.</p><h2>Before iOS 13</h2><p>Previosly if you wanted to use Websockets in Apple platforms you had to rely on <a href="https://developer.apple.com/documentation/cfnetwork">CFNetwork</a> which was added in iOS 2.0. It is using C based foundation streams. You then have to deal with pointers and memory allocation issues which is quite common in C language.</p><p>Another way was to use third party solutions like <a href="https://github.com/daltoniam/Starscream">Starscream</a> which I have <a href="https://kristaps.me/websockets-swift/">described before</a>.</p><h2>Websockets using URLSession</h2><p>Here are three ways how you can construct a Websocket using <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask">URLSessionWebSocketTask</a> class provided by <a href="https://developer.apple.com/documentation/foundation/urlsession">URLSession</a>:</p><pre><code><span class="keyword">func</span> webSocketTask(with: <span class="type">URL</span>) -&gt; <span class="type">URLSessionWebSocketTask</span>
<span class="keyword">func</span> webSocketTask(with: <span class="type">URLRequest</span>) -&gt; <span class="type">URLSessionWebSocketTask</span>
<span class="keyword">func</span> webSocketTask(with: <span class="type">URL</span>, protocols: [<span class="type">String</span>]) -&gt; <span class="type">URLSessionWebSocketTask</span>
</code></pre><h3>Opening connection</h3><p>To create and open Websocket connection:</p><pre><code><span class="keyword">let</span> urlSession = <span class="type">URLSession</span>(configuration: .<span class="dotAccess">default</span>)
<span class="keyword">let</span> webSocketTask = urlSession.<span class="call">webSocketTask</span>(with: <span class="string">"wss://echo.websocket.org"</span>)
webSocketTask.<span class="call">resume</span>()
</code></pre><h3>Sending messages</h3><p>When connection has been established you can send <code>Data</code> or <code>String</code> message using <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3281790-send">URLSessionWebSocketTask.send</a> function. You need to construct message with <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/message">URLSessionWebSocketTask.Message</a> enum type.</p><pre><code><span class="keyword">let</span> message = <span class="type">URLSessionWebSocketTask</span>.<span class="type">Message</span>.<span class="call">string</span>(<span class="string">"Hello World"</span>)
webSocketTask.<span class="call">send</span>(message) { error <span class="keyword">in
  if let</span> error = error {                
    <span class="call">print</span>(<span class="string">"WebSocket couldn’t send message because:</span> \(error)<span class="string">"</span>)
  }
}
</code></pre><h3>Receiving messages</h3><p>To receive messages from the server you need to use <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3281789-receive">URLSessionWebSocketTask.receive</a> method. It accepts completion handler which is a <a href="https://developer.apple.com/documentation/swift/result">Result</a> of <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/message">Message</a> type.</p><pre><code>webSocketTask.<span class="call">receive</span> { result <span class="keyword">in
  switch</span> result {
  <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
    <span class="call">print</span>(<span class="string">"Error in receiving message:</span> \(error)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> message):
    <span class="keyword">switch</span> message {
    <span class="keyword">case</span> .<span class="dotAccess">string</span>(<span class="keyword">let</span> text):
      <span class="call">print</span>(<span class="string">"Received string:</span> \(text)<span class="string">"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">data</span>(<span class="keyword">let</span> data):
      <span class="call">print</span>(<span class="string">"Received data:</span> \(data)<span class="string">"</span>)
    }
  }
}
</code></pre><p>Be aware that if you want to receive messages continuously you need to call this again once you are done with receiving a message. One way is to wrap this in a function and call the same function recursively.</p><pre><code><span class="keyword">func</span> receiveMessage() {
  webSocketTask.<span class="call">receive</span> { result <span class="keyword">in
    switch</span> result {
    <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
      <span class="call">print</span>(<span class="string">"Error in receiving message:</span> \(error)<span class="string">"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> message):
      <span class="keyword">switch</span> message {
      <span class="keyword">case</span> .<span class="dotAccess">string</span>(<span class="keyword">let</span> text):
        <span class="call">print</span>(<span class="string">"Received string:</span> \(text)<span class="string">"</span>)
      <span class="keyword">case</span> .<span class="dotAccess">data</span>(<span class="keyword">let</span> data):
        <span class="call">print</span>(<span class="string">"Received data:</span> \(data)<span class="string">"</span>)
      }
      
      <span class="keyword">self</span>.<span class="call">receiveMessage</span>()                
    }
  }	
}
</code></pre><h3>Pings and pongs</h3><p>To keep connection active with the server it is a good approach to send PING message with an interval. You can achieve that with <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/3181206-sendping">URLSessionWebSocketTask.sendPing</a> function.</p><pre><code><span class="keyword">func</span> sendPing() {
  webSocketTask.<span class="call">sendPing</span> { (error) <span class="keyword">in
    if let</span> error = error {
      <span class="call">print</span>(<span class="string">"Sending PING failed:</span> \(error)<span class="string">"</span>)
    }

    <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">asyncAfter</span>(deadline: .<span class="call">now</span>() + <span class="number">10</span>) {
      <span class="keyword">self</span>.<span class="call">sendPing</span>()
    }
  }
}
</code></pre><p>Here again you need to take care of the next PING sending yourself. Easiest way is to just use DispatchQueue or Timer functionality.</p><h3>Close connection</h3><p>Once you’re done and would like to close the Websocket connection you need to send a close code which is a <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask/closecode">URLSessionWebSocketTask.CloseCode</a> enum type.</p><pre><code>webSocketTask.<span class="call">cancel</span>(closeCode: .<span class="dotAccess">goingAway</span>, reason: <span class="keyword">nil</span>)
</code></pre><h3>Checking connection state</h3><p>To monitor connection status you can use <a href="https://developer.apple.com/documentation/foundation/urlsessionwebsocketdelegate">URLSessionWebSocketDelegate</a> protocol. You can check once connection has been opened or closed.</p><pre><code><span class="comment">/// connection disconnected</span>
<span class="keyword">func</span> urlSession(<span class="keyword">_</span> session: <span class="type">URLSession</span>, 
                webSocketTask: <span class="type">URLSessionWebSocketTask</span>,
                didCloseWith closeCode: <span class="type">URLSessionWebSocketTask</span>.<span class="type">CloseCode</span>,
                reason: <span class="type">Data</span>?)

<span class="comment">// connection established</span>
<span class="keyword">func</span> urlSession(<span class="keyword">_</span> session: <span class="type">URLSession</span>,
                webSocketTask: <span class="type">URLSessionWebSocketTask</span>,
                didOpenWithProtocol protocol: <span class="type">String</span>?)
</code></pre><h2>TL;DR</h2><p>Apple has finally added Websockets as first-class citzen to its platforms. Of course there are small quirks and rough edges. For instance, you can’t receive messages continously, but you don’t need to mess with constructing Websocket frame anymore which is a big win.</p><p>Right now it is available only for latest betas and if you support older versions of iOS, tvOS, watchOS or macOS you need to think about backwards compatibility yourself.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/foundation">URLsession documentation</a></li><li><a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask">URLSessionWebSocketTask documentation</a></li><li><a href="https://developer.apple.com/documentation/foundation/urlsessionwebsocketdelegate">URLSessionWebSocketDelegate documentation</a></li><li><a href="https://appspector.com/blog/websockets-in-ios-using-urlsessionwebsockettask">Blogpost by AppSpector</a></li><li><a href="https://kristaps.me/websockets-swift/">My previous blogpost about using Websockets</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/wwdc-2019</guid><title>WWDC 2019</title><description>This year I finally had a chance to attend [WWDC](https://developer.apple.com/wwdc19/) (Apple Worldwide Developers Conference). It has always been my dream to go there and see the Keynote, conference and all other events with my own eyes.</description><link>https://kristaps.me/blog/wwdc-2019</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This year I finally had a chance to attend <a href="https://developer.apple.com/wwdc19/">WWDC</a> (Apple Worldwide Developers Conference). It has always been my dream to go there and see the Keynote, conference and all other events with my own eyes.</p><img src="https://kristaps.me/assets/img/wwdc2019/ios-craig-federighi.jpg" alt="Keynote"/><h2>Waiting</h2><p>First thing what comes into my mind about this event is waiting. You need to line up for getting the badge, food and sessions. For everything, really.</p><img src="https://kristaps.me/assets/img/wwdc2019/waiting.jpg" alt="Waiting in line for Keynote WWDC 2019"/><p>The biggest wait is for the Monday morning Keynote presentation, of course. Some people started to wait for it on the previous evening, but usually people arrive at 5AM in the morning. I arrived at 7:30AM and got a decent seat in 12th row. I was sitting right next to some other folks who arrived an hour earlier than me. I guess I was lucky.</p><p>While you’re waiting go and talk to others! For me it is quite hard to start a conversation with strangers, but most of the attendees are there to socialize and meet other people.</p><h2>Labs</h2><p>Everyone who has attended WWDC is telling that you need to go to labs. Sessions are recored and you can watch them afterwards, but talking with Apple employees is something you can only get during this event. I would suggest to make appointments to labs as early as you can. Not only will you have more questions to prep, appointment times also fill up pretty quickly.</p><img src="https://kristaps.me/assets/img/wwdc2019/labs.jpg" alt="App Store Labs"/><p>Preparation is the key when you want to get most out of the labs. Having questions, test project and showing actual code with your app helps a lot. And even Apple folks are humans. Sometimes they don’t have answers to everything but can at least steer you in the right direction.</p><p>While you are waiting in the line for appointment or next free Apple engineer, talk with others around you. You can learn, exchange opinions or even get answers while you’re still in the queue.</p><h2>Meeting people</h2><p>We all know that developers are bad at socializing, but most of them are willing to talk about common subjects and share their experience. Be the person who starts the conversation. Either it is during the lunch, waiting for the appointment in labs or in a party. I went there alone and didn’t have a company, so I had nothing to loose.</p><p>Try to connect with people who you meet in Twitter, LinkedIn or email. You can never underestimate all the connections that can come handy at some point or you can learn from each other's work or experience.</p><img src="https://kristaps.me/assets/img/wwdc2019/with-chris-lattner.jpg" alt="Meeting Chris Lattner"/><p>During this week you can meet a lot of well known people from the community because most of them are there in San Jose. I had chance to meet many of them. During try! Swift I met <a href="https://twitter.com/clattner_llvm">Chris Lattner</a> who is the creator of the Swift language. This event was one of the highlight's of the week because I made my first contribution to the Swift language which will be included in upcoming Xcode version.</p><h2>TL;DR</h2><p>A lot of things are happening during WWDC week and it is easy to be overwhelmed. Besides WWDC itself there are many events like <a href="http://altconf.com/">Altconf</a> and <a href="https://www.tryswift.co/events/2019/sanjose/">try! Swift</a>. Every evening multiple meetups, parties and other events are happening.</p><p>Everyone is so much excited and hyped about the new technologies, APIs and products, but what happens afterwards? Once you go back home to regular jobs, projects and apps it is hard to implement these new things right away. You can't and shouldn't rewrite existing working products. It just does not make any sense.</p><p>I think WWDC is a great conference and we need to look about all these new things in long term rather jumping and using it all from day zero.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/wwdc19/">WWDC19</a></li><li><a href="http://altconf.com/">AltConf</a></li><li><a href="https://www.tryswift.co/events/2019/sanjose/">try! Swift</a></li><li><a href="https://developer.apple.com/">Apple Developer portal</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/uiview-vs-calayer</guid><title>UIView vs CALayer</title><description>Here's something useful to know - [UIView’s](https://developer.apple.com/documentation/uikit/uiview) are backed by [CALayer’s](https://developer.apple.com/documentation/quartzcore/calayer). Layers offer a lower-level interface to the visual content. When we need more flexibility or performance, we can go to layer level.</description><link>https://kristaps.me/blog/uiview-vs-calayer</link><pubDate>Fri, 3 May 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Here's something useful to know - <a href="https://developer.apple.com/documentation/uikit/uiview">UIView’s</a> are backed by <a href="https://developer.apple.com/documentation/quartzcore/calayer">CALayer’s</a>. Layers offer a lower-level interface to the visual content. When we need more flexibility or performance, we can go to layer level.</p><img src="https://kristaps.me/assets/img/uiview-calayer.png" alt="Each UIView has an assigned layer"/><p>One good example is animations. UIView animations are so called “stock” or "low cost" animations. When we need more flexibility we can go one level deeper to layers and use <a href="">Core Animation</a> instead UIView animations.</p><p>To understand more about views and layers let’s see how they differ.</p><h2>UIView</h2><p>Views have more complex hierarchy layouts. To lay them out on the screen we can use <a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/index.html">Auto Layout</a>.</p><p>They can receive user interactions like taps, pinches, cliks and more.</p><p>When you need to create custom views, you can subclass UIView or many other specialized types provided by <a href="https://developer.apple.com/documentation/uikit">UIKit</a> or <a href="https://developer.apple.com/documentation/appkit">AppKit</a>. They are very flexible to do that.</p><p>Working with UIViews happens on the main thread, it means it is using CPU power.</p><h2>CALayer</h2><p>Layers on other hand have simpler hierarchy. That means they are faster to resolve and quicker to draw on the screen.</p><p>There is no responder chain overhead unlike with views.</p><p>CALayer has no custom logic by default. It means that they are not so flexible and fewer classes to subclass for specific needs.</p><p>Layers are drawn directly on the GPU. It happens on a separate thread without burdening the CPU.</p><h2>TL;DR;</h2><p>Each UIView is backed by CALayer which is one level deeper. Views are being drawn using CPU on the main thread. Drawing layers on other hand is on separate thread using GPU power. When you need more flexibility you can move one level down from UIView by using CALayer capabilities.</p><h2>Links</h2><ul><li><a href="https://www.raywenderlich.com/402-calayer-tutorial-for-ios-getting-started">Ray Wenderlich</a></li><li><a href="https://dzone.com/articles/ios-brownbag-views-vs-layers">iOS Brownbag: Views vs. Layers</a></li><li><a href="https://www.objc.io/issues/12-animations/view-layer-synergy/">View-Layer Synergy</a></li><li><a href="https://developer.apple.com/documentation/uikit/uiview">UIView documentation</a></li><li><a href="https://developer.apple.com/documentation/quartzcore/calayer">CALayer documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/what-is-animation-core-animation</guid><title>What is (Core) Animation</title><description>Animation has been an important part of the Mac OS X user interface since the very beginning. You’ve probably seen the Genie effect, which occurs when you minimize an application, so many times that you hardly notice it anymore. Apple integrates animation into its operating systems and applications, and it is becoming so commonplace that users are starting to expect it. Core Animation is a group of features that makes it easy to build animated user interfaces for the Apple ecosystem devices like iPhone, iPad, Apple TV, and Mac.</description><link>https://kristaps.me/blog/what-is-animation-core-animation</link><pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Animation has been an important part of the Mac OS X user interface since the very beginning. You’ve probably seen the Genie effect, which occurs when you minimize an application, so many times that you hardly notice it anymore.</p><p>Apple integrates animation into its operating systems and applications, and it is becoming so commonplace that users are starting to expect it.</p><p>Core Animation is a group of features that makes it easy to build animated user interfaces for the Apple ecosystem devices like iPhone, iPad, Apple TV, and Mac.</p><img src="https://kristaps.me/assets/img/cat-animation.gif" alt="Cat animation"/><h2>What is Animation?</h2><p>Animation is a change of value or state over time. If we look closer at the cat animation above, it consists of two animations. Firstly, cat slides from left to right, which is a value change of X axis coordinate over time. Secondly, picture fades out, and that is a state value change.</p><p>We always need to think about value or state we would like to change, end time (when we want this animation to finish), and sometimes begin time if we want to delay the animation.</p><h2>What is Core Animation?</h2><p>Core Animation is a graphics compositing framework provided by Apple to build animated user interfaces. The project's initial codename was Layer Kit, and it first appeared in Mac OS X Leopard on 7 August 2006. It was created by John Harper.</p><img src="https://kristaps.me/assets/img/core-animation-logo.png" alt="Core Animation"/><p>Core Animation was introduced with the first iPhone on 9 January 2007. Steve Jobs explained that it runs adapted version of Mac OS X, and that included Core Animation framework as well.</p><p>Core Animation provides high frame rates and smooth animations without burdening the CPU and slowing down your app, according to Apple documentation.</p><h2>TL;DR</h2><p>Core Animation's developer-focused marketing slogan is "Render, compose, and animate visual elements". This shows us that Apple wants us to use Core Animation for more sophisticated UI tasks, when using UIView animations is not enough.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/quartzcore">Core Animation documentation</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html">Core Animation Programming Guide</a></li><li><a href="https://pragprog.com/book/bdcora/core-animation-for-mac-os-x-and-the-iphone">Core Animation for Mac OS X and the iPhone</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/animating-shapes-in-ios</guid><title>Animating shapes in iOS</title><description>Animating a UIBezierPath drawing is a pretty trivial task. But how to animate shape morphing, i.e. make one shape change into another? (For instance, morphing a triangle into a square.) To accomplish this, we need to use CAShapeLayer and animate its properties using Core Animation capabilities.</description><link>https://kristaps.me/blog/animating-shapes-in-ios</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Animating a <code>UIBezierPath</code> drawing is a pretty trivial task. But how to animate shape morphing, i.e. make one shape change into another? (For instance, morphing a triangle into a square.) To accomplish this, we need to use <code>CAShapeLayer</code> and animate its properties using Core Animation capabilities.</p><p>First things first, let’s see which properties of <code>CAShapeLayer</code> can be animated with Core Graphics:</p><ul><li>Path</li><li>Fill color</li><li>Line dash phase</li><li>Line width</li><li>Miter limit</li><li>Stroke color</li><li>Stroke start and end.</li></ul><h2>Shape morphing</h2><p>To animate shape morphing, we need to change the <code>path</code> property. Keep in mind that both shapes need to have the same number of points that comprise them. Otherwise, the animation would end up looking clunky and unnatural.</p><img src="https://kristaps.me/assets/img/ugly-animation-from-square-to-triangle.gif" alt="Ugly animation from square to triangle"/><p>Even <a href="https://developer.apple.com/documentation/quartzcore/cashapelayer/1521904-path?language=objc">Apple’s official documentation</a> is warning us about that.</p><blockquote><p>Paths will interpolate as a linear blend of the "on-line" points; ”off-line” points may be interpolated non-linearly (e.g. to preserve continuity of the curve's derivative). If the two paths have a different number of control points or segments the results are undefined. If the path extends outside the layer bounds it will not automatically be clipped to the layer, only if the normal layer masking rules cause that.</p></blockquote><p>If we have same amount of points for both paths we can achieve much nicer animation.</p><img src="https://kristaps.me/assets/img/nice-animation-from-square-to-triangle.gif" alt="Nice animation from square to triangle"/><h2>Combining multiple animations</h2><p>The next step is to combine multiple <code>CGPath</code> animations together. To accomplish this, we can use <code>CAAnimationGroup</code>, which allows multiple animations to be grouped and run concurrently.</p><p>Be aware that you need to set correct <code>beginTime</code> for each animation so that they would start one after another. Animation properties like <code>duration</code>, <code>autoReverses</code>, <code>repeatCount</code> and others need to be set on the animation group object.</p><pre><code><span class="keyword">let</span> animationGroup = <span class="type">CAAnimationGroup</span>()
animationGroup.<span class="property">animations</span> = [...]
animationGroup.<span class="property">autoreverses</span> = <span class="keyword">true</span>
animationGroup.<span class="property">repeatCount</span> = .<span class="dotAccess">greatestFiniteMagnitude</span>
animationGroup.<span class="property">duration</span> = <span class="number">2.0</span>

</code></pre><img src="https://kristaps.me/assets/img/animation-multiple-shapes.gif" alt="Animation with multiple shapes"/><h2>TL;DR</h2><p><code>CAAnimationGroup</code> is a powerful feature that allows for several uses, from Core Animation to grouping multiple <code>CABasicAnimation</code>s together. If you want to animate from one path to another, be aware that <em>from</em> and <em>to</em> paths should have the same amount of points. Otherwise, the animation would look off because the animation algorithms can’t interpolate these points correctly.</p><h2>Links</h2><ul><li><a href="https://developer.apple.com/documentation/quartzcore/cashapelayer/1521904-path">Apple's CAShapeLayer path documentation</a></li><li><a href="https://calayer.com/core-animation/2017/12/25/cashapelayer-in-depth-part-ii.html">CAShapeLayer in Depth</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kristaps.me/blog/websockets-swift</guid><title>Websockets in iOS using Swift</title><description>WebSockets allow for extremely fast two-way networking communication, which lets you send and receive updates quicker and more often, not to mention securely. WebSocket is a communication protocol that uses sockets, providing duplex communication over a single TCP connection. It was standardized by the [IETF](https://tools.ietf.org/html/rfc6455) in 2011 and is a different protocol from HTTP.</description><link>https://kristaps.me/blog/websockets-swift</link><pubDate>Sat, 5 Jan 2019 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>WebSockets allow for extremely fast two-way networking communication, which lets you send and receive updates quicker and more often, not to mention securely. WebSocket is a communication protocol that uses sockets, providing duplex communication over a single TCP connection. It was standardized by the <a href="https://tools.ietf.org/html/rfc6455">IETF</a> in 2011 and is a different protocol from HTTP.</p><p>WebSockets are widely used in chat apps, streaming real-time notifications, and stock prices.</p><h2>Websocket lifecycle</h2><h3>Shaking hands with the server</h3><p>The <a href="https://tools.ietf.org/html/rfc6455#section-4">handshake</a> app is the web part in WebSockets. It's the bridge from HTTP to WebSocket. The client sends a pretty standard HTTP GET <a href="https://tools.ietf.org/html/rfc6455#section-4.2.1">request</a> to the server:</p><pre><code class="language-no-highlight">GET /chat HTTP/1.1
Host: example.com:8000
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Sec-WebSocket-Version: 1
</code></pre><p>The most interesting thing here is <code>Sec-WebSocket-Key</code> which is needed for security reasons and is generated according to the <a href="http://tools.ietf.org/html/rfc6455#page-7">WebSocket standard</a>.</p><p>The server validates the request and, if everything is fine, sends back an HTTP <a href="https://tools.ietf.org/html/rfc6455#section-4.2.2">response</a>:</p><pre><code class="language-no-highlight">HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
</code></pre><h3>Exchange the information</h3><p>At any time, the server or client can send data that follows this specific format:</p><img src="https://kristaps.me/assets/img/websocket-frame-format.png" alt="Websocket Frame Format"/><p>I will not go over each part, but you can find out more in the <a href="https://tools.ietf.org/html/rfc6455#section-5.6">standard</a>.</p><h3>Pings and pongs</h3><p>At any point, the client or server can send a <a href="https://tools.ietf.org/html/rfc6455#section-5.5.2">ping</a>, and other party must send back a <a href="https://tools.ietf.org/html/rfc6455#section-5.5.3">pong</a>.</p><h3>Closing</h3><p>Connection can be closed by any party via sending a <a href="https://tools.ietf.org/html/rfc6455#section-5.5.1">specified control sequence</a>.</p><h2>Implementing WebSockets in iOS</h2><p>Implementing WebSockets in iOS, macOS, tvOS or watchOS isn’t a trivial task. New <a href="https://developer.apple.com/documentation/network">Network.framework</a> can simplify that but you still need to deal with underlying tasks like upgrading connection and setting up a WebSocket frame.</p><h3>Starscream</h3><p>The Swift WebSocket client library <a href="https://github.com/daltoniam/Starscream">Startscream</a> simplifies all the heavy-lifting tasks. Install the library and import it in any Swift file.</p><pre><code><span class="keyword">import</span> Starscream
</code></pre><h3>Creating the connection</h3><p>After that, create a connection and set up the delegate.</p><pre><code><span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"ws://echo.websocket.org"</span>)!
<span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: url)
<span class="keyword">let</span> websocket = <span class="type">WebSocket</span>(request: request)
</code></pre><h3>Setting up delegation</h3><p>Then we need to set up delegate and implement <code>didReceive</code> method with event <code>WebSocketEvent</code> type.</p><pre><code><span class="keyword">func</span> didReceive(event: <span class="type">WebSocketEvent</span>, client: <span class="type">WebSocket</span>) {
  <span class="keyword">switch</span> event {
  <span class="keyword">case</span> .<span class="dotAccess">connected</span>(<span class="keyword">let</span> headers):
    <span class="call">print</span>(<span class="string">"connected</span> \(headers)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">disconnected</span>(<span class="keyword">let</span> reason, <span class="keyword">let</span> closeCode):
    <span class="call">print</span>(<span class="string">"disconnected</span> \(reason) \(closeCode)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">text</span>(<span class="keyword">let</span> text):
    <span class="call">print</span>(<span class="string">"received text:</span> \(text)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">binary</span>(<span class="keyword">let</span> data):
    <span class="call">print</span>(<span class="string">"received data:</span> \(data)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">pong</span>(<span class="keyword">let</span> pongData):
    <span class="call">print</span>(<span class="string">"received pong:</span> \(pongData)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">ping</span>(<span class="keyword">let</span> pingData):
    <span class="call">print</span>(<span class="string">"received ping:</span> \(pingData)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">error</span>(<span class="keyword">let</span> error):
    <span class="call">print</span>(<span class="string">"error</span> \(error)<span class="string">"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">viabilityChanged</span>:
    <span class="call">print</span>(<span class="string">"viabilityChanged"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">reconnectSuggested</span>:
    <span class="call">print</span>(<span class="string">"reconnectSuggested"</span>)
  <span class="keyword">case</span> .<span class="dotAccess">cancelled</span>:
    <span class="call">print</span>(<span class="string">"cancelled"</span>)
  }
}
</code></pre><p>Once this is done, we can start the connection. Making the handshake and upgrading connection is done behind the scenes by the library.</p><pre><code>socket.<span class="call">connect</span>();
</code></pre><h3>Sending data</h3><p>There are several ways to send data:</p><ul><li>binary</li><li>string</li><li>ping</li><li>pong</li></ul><p>The easiest way is to just send a string:</p><pre><code>socket.<span class="call">write</span>(string: <span class="string">"Hi Server!"</span>)
</code></pre><h3>Closing the connection</h3><p>At any point, we can check close it if it’s not needed anymore.</p><pre><code>websocket.<span class="call">disconnect</span>(closeCode: <span class="type">CloseCode</span>.<span class="property">goingAway</span>.<span class="property">rawValue</span>)
</code></pre><h2>TL;DR</h2><p>WebSocket isn’t a first-class citizen in iOS, macOS, tvOS and watchOS. It can be quite overwhelming to implement, use and understand it, but the Swift library Starscream can help you take care of all these tasks.</p><h2>Links</h2><ul><li><a href="https://tools.ietf.org/html/rfc6455">The WebSocket Protocol</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">Writing WebSocket servers</a></li><li><a href="https://github.com/daltoniam/Starscream">Starscream Swift WebSocket library</a></li><li><a href="https://github.com/ZewoGraveyard/WebSocket/blob/master/Sources/WebSocket/Frame.swift">Websocket Frame implementation in Swift</a></li><li><a href="http://lucumr.pocoo.org/2012/9/24/websockets-101/">WebSockets 101</a></li><li><a href="https://devcenter.heroku.com/articles/websocket-security">WebSocket Security</a></li></ul>]]></content:encoded></item></channel></rss>